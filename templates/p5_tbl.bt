//------------------------------------------------
//--- 010 Editor v8.0 Binary Template
//
//      File: AtlusTable_P5.bt
//   Authors: TGE, Lillian Goulston, Scarltz, DeathChaos
//   Version: 1.9
//   Purpose: Parse Persona 5 Table files.
//  Category: Persona 5
// File Mask: *.tbl, *.pac
//  ID Bytes:
//   History:
//   1.0 - Initial release
//   1.1 - Parse tables from within table.pac, add enums for battle skills and units, misc changes
//   1.2 - Added struct for party member Persona skill list and stat gains, fixed enum for party member IDs
//   1.3 - Added struct and enum for elemental affinities in UNIT.TBL
//   1.4 - Added a lot of new enums for skill data
//       - Added and completed struct for first segment of SKILL.TBL
//       - Added incomplete struct for second segment of SKILL.TBL, most of the fundamental stuff is there, but it's still very much a WIP
//       - Added struct for XP per level in PLAYER.TBL
//       - Started work on AICALC structs
//   1.5 - Added names and comments to most structs for more accessibility and ease of use
//       - Added enums for battle music in ENCOUNTER.TBL
//       - Added enums for Arcana
//   1.6 - Added struct for Enemy Elemental Affinities in UNIT.TBL
//       - Added structs and enums for items in ITEM.TBL
//       - Added and commented on a handful of new entries in certain enums (AffinityStatus, Skill_HPEffect, and Skill_Target Restrictions)
//   1.7 - Added separate template for common P5 structs (p5_structs.bt)
//       - Added bool struct to make bitfields easier to read when editing
//       - Changed certain skill enums to bitfields (Skill_ValidTargets, AffinityStatus, Buffs/Debuffs, and applied effects)
//       - Added max HP/SP gain per level of party members in PLAYER.TBL
//   1.8 - Added attack hit frame data variables to the relevant VISUAL.TBL sections
//   1.9 - Added Skill Area Type (Battle/Field/Both)
//       - Merged some variables since they are always 0
//------------------------------------------------


//---------------------------------------------
// Type definition
//---------------------------------------------
typedef ubyte u8;
typedef short s16;
typedef ushort u16;
typedef uint u32;
typedef float f32;

enum<byte>bool
{
    False = 0,
    True = 1,
};

typedef struct
{
    u8 bit0 : 1;
    u8 bit1 : 1;
    u8 bit2 : 1;
    u8 bit3 : 1;
    u8 bit4 : 1;
    u8 bit5 : 1;
    u8 bit6 : 1;
    u8 bit7 : 1;
} b8;

typedef struct
{
    u8 nonbegging : 1 <name = "No Begging Shadows", comment = "Enemies will never beg regardless of their personality (Meaning, it is as if it's always irritable)">;
    u8 hidingstatus : 1 <name = "Hiding the status", comment = "Enemies status can be hidden similar to boss">;
    u8 bit2 : 1;
    u8 bit3 : 1;
    u8 ContinuebattleandGuaranteePersonaMask : 1 <name = "Continue Battle and Guarantee Persona Mask", comment = "Even after obtaining Persona, you will still return the battle">;
    u8 nonnegotiable : 1 <name = "Not negotiable", comment = "Enemies will never be able to negotiate">;
    u8 bit6 : 1;
    u8 bit7 : 1;
    u8 bit8 : 1;
    u8 bit9 : 1;
    u8 bit10 : 1;
    u8 bit11 : 1;
    u8 bit12 : 1;
    u8 hidingstatus2 : 1 <name = "Hiding the status", comment = "Enemies status can be hidden similar to boss">;
    u8 bit14 : 1;
    u8 NoCritical : 1 <name = "No Critical", comment = "Even if you have a skill with 100% Critical, it will never trigger critical if this is ON">;
} b16;

typedef struct
{
    u8 bit0 : 1;
    u8 bit1 : 1;
    u8 bit2 : 1;
    u8 bit3 : 1;
    u8 bit4 : 1;
    u8 bit5 : 1;
    u8 bit6 : 1;
    u8 bit7 : 1;
    u8 bit8 : 1;
    u8 bit9 : 1;
    u8 bit10 : 1;
    u8 bit11 : 1;
    u8 NonNegotiable : 1 <name = "No Negotiation", comment = "If this turns on, every enemy in that battle can't be negotiated">;
    u8 bit13 : 1;
    u8 bit14 : 1;
    u8 bit15 : 1;
    u8 bit16 : 1;
    u8 PositionHack : 1 <name = "Position Hack", comment = "Triggers Position Hack when you enter the battle">;
    u8 bit18 : 1;
    u8 shadownotdisappearinbattle : 1 <name = "Not Disappear in Battle", comment = "When the shadow HP reaches 0, it will not disperse if this is turned ON in ENCOUNT.TBL Flag">;
    u8 BulletHailonstart : 1 <name = "Bullet Hail on Start", comment = "When you start the battle, you will always start with Bullet Hail">;
    u8 bit21 : 1;
    u8 bit22 : 1;
    u8 loadbattlescript : 1 <name = "Battle script load", comment = "This will load the battle script for this particular battle (CAUTION: Will cause freeze if the battle script file is not exist)">;
    u8 bit24 : 1;
    u8 bit25 : 1;
    u8 loadbattlescript2 : 1 <name = "Battle script load", comment = "This will load the battle script for this particular battle (CAUTION: Will cause freeze if the battle script file is not exist)">;
    u8 bit27 : 1;
    u8 NoCritical : 1 <name = "No Critical", comment = "Even if you have a skill with 100% Critical, it will never trigger critical if this is ON">;
    u8 bit29 : 1;
    u8 bit30 : 1;
    u8 TreasureSkimmer : 1 <name = "Treasure Skimmer", comment = "This will always trigger Treasure Skimmer if it is ON except if Position Hack is ON">;
} b32;


//---------------------------------------------
// Includes
//---------------------------------------------
#include "p5_enums.bt"
#include "p5_structs.bt"
//---------------------------------------------
// Helper functions
//---------------------------------------------
local uint __RandomSeed = 0xDEADBABE;
local uint __RandomBit = 0;
local uint __RandomCount = 0;

uint MyRandom( uint to )
{
    ++__RandomCount;
    __RandomBit  = ( (__RandomSeed >> 0 ) ^ ( __RandomSeed >> 2 ) ^ ( __RandomSeed >> 3 ) ^ ( __RandomSeed >> 5 ) ) & 1;
    __RandomSeed = ( ( ( ( __RandomBit << 15 ) | ( __RandomSeed >> 1 ) ) + ( 0xBABE / __RandomCount ) ) % to );

    while( __RandomSeed < 0 )
        __RandomSeed += to;

    return __RandomSeed;
}

void DetectEndianness()
{
    // Test endianness
    LittleEndian();
    local uint sizeTest = ReadUInt();
    if ( sizeTest & 0xFF000000 )
        BigEndian();
}

u32 Align( u32 value, u32 alignment )
{
  return (value + (alignment - 1)) & ~(alignment - 1);
}

void FAlign( u32 alignment )
{
  FSeek( Align( FTell(), alignment ) );
}

//---------------------------------------------
// Define structures
//---------------------------------------------

// Persona
typedef struct
{
    PersonaFlags Flags <name = "Bitflags">;
    ArcanaID Arcana <name = "Arcana">;
    u8 Level <name = "Base Level">;
    PersonaStats Stats <name = "Base Stats">;
    u8 : 1;
    PersonaInherit Inherit <name = "Skill Inheritance">;
    u16 Unknown <name = "Unknown">;
} TPersonaStats <name = "Stats">;

local u32 personaSkillsAndStatGrowth = 0;
typedef struct
{
    PersonaStats WeightedStatDistribution <name = "Weighted Stat Growth Distribution", comment = "Chance to gain +1 on level-up = (Stat Weight / Sum of Stat Weights). 3 chances per level.">;
    u8 : 1;

    struct
    {
        u8 PendingLevels <name = "Pending Levels">;
        bool Learnable <name = "Learnable?">;
        BattleSkill Skill  <name = "Skill">;
    } PersonaSkill[ 16 ] <name = "Skills">;

} TPersonaSkillsAndStatGrowths <name = "Skills & Stat Growths">;

typedef struct
{
    u32 Thresholds[98] <name = "EXP Threshold">;
} TPersonaLevelUpThresholds <name = "Party Member Level Up Thresholds">;

typedef struct
{
    PartyMember Member <name = "Character">;
    u8 LevelsAvailable <name = "Levels Available">;
    u8 Unknown;

    struct
    {
        u8 Level <name = "Level Learned">;
        bool Learnable <name = "Learnable?">;
        BattleSkill Skill <name = "Skill">;
    } PersonaSkill[ 32 ] <name = "Persona Skills">;

    PersonaStats StatGain[ 98 ] <name = "Persona Stat Gain by Level">;

} TPersonaPartyPersonas <name = "Party Member Personas">;

// Player

typedef u32 TPlayer_LevelUpThresholds <name = "Player Level-Up Thresholds">;

typedef struct
{
        struct

            {
            u16 HP <name = "HP Gain">;
            u16 SP <name = "SP Gain">;
            } HPSPNone <name = "N/A">;
        struct
            {
            u16 HP <name = "HP Gain">;
            u16 SP <name = "SP Gain">;
            } HPSPJoker <name = "Joker">;
        struct
            {
            u16 HP <name = "HP Gain">;
            u16 SP <name = "SP Gain">;
            } HPSPRyuji <name = "Ryuji">;
        struct
            {
            u16 HP <name = "HP Gain">;
            u16 SP <name = "SP Gain">;
            } HPSPMorgana <name = "Morgana">;
        struct
            {
            u16 HP <name = "HP Gain">;
            u16 SP <name = "SP Gain">;
            } HPSPAnn <name = "Ann">;
        struct
            {
            u16 HP <name = "HP Gain">;
            u16 SP <name = "SP Gain">;
            } HPSPYusuke <name = "Yusuke">;
        struct
            {
            u16 HP <name = "HP Gain">;
            u16 SP <name = "SP Gain">;
            } HPSPMakoto <name = "Makoto">;
        struct
            {
            u16 HP <name = "HP Gain">;
            u16 SP <name = "SP Gain">;
            } HPSPHaru <name = "Haru">;
        struct
            {
            u16 HP <name = "HP Gain">;
            u16 SP <name = "SP Gain">;
            } HPSPFutaba <name = "Futaba">;
        struct
            {
            u16 HP <name = "HP Gain">;
            u16 SP <name = "SP Gain">;
            } HPSPAkechi <name = "Akechi">;
        struct
            {
            u16 HP <name = "HP Gain">;
            u16 SP <name = "SP Gain">;
            } HPSP_pad <name = "(extra space)">;

} TPlayer_HPSPPerLevel <name = "HP/SP Per Level">;

// Exist

typedef struct
{
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
} TExist_Segment1;

typedef struct
{
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
} TExist_Segment2;

// Elsai
typedef struct
{
    u16 Unused;
    u16 AiId <name = "AI ID", comment = "All I know about this value is that if it's not 0, it causes the game to load an AI script for this enemy">;
    u32 Unknown[ 10 ];
} TElsaiSegment1Entry;

typedef struct
{
    u16 Data[ 160 ];
} TElsaiSegment2Entry;

// AICalc tables
// Segment1 probably has bigger chunks than u32
typedef struct
{
    u32 Unknown[41];
} TAICalc_Segment1;

typedef struct
{
    u32 Unknown;
} TAICalc_Segment2;

typedef struct
{
    u32 Unknown;
} TAICalc_Segment3;

typedef struct
{
    u32 Unknown;
} TAICalc_Segment4;

typedef struct
{
    u32 Unknown;
} TAICalc_Segment5;

typedef struct
{
    u8 Unknown;
    u8 Unknown;
    u8 Unknown;
} TAICalc_Segment6;

typedef struct
{
    u32 Unknown;
} TAICalc_Segment7;

typedef struct
{
    u16 Unknown;
    u16 Unknown;
} TEncounterUnknown;

// Encounter
typedef struct
{
    b32 Flags <name = "Flags">;
    u16 Field04;
    u16 Field06;
    BattleUnit Units[ 5 ] <name = "Battle Units">;
    u16 FieldId <name = "Field ID">;
    u16 RoomId <name = "Room ID">;
    MusicID MusicId <name = "Music">;
} TEncounter <name = "Enemy Encounters">;

typedef struct
{
    b32 Flags <name = "Flags">;
    u16 Field04;
    u16 Field06;
    BattleUnit Units[ 5 ] <name = "Battle Units">;
    u16 FieldId <name = "Field ID">;
    u16 RoomId <name = "Room ID">;
    MusicID MusicId <name = "Music">;
	TEncounterUnknown Unknown [ 5 ] <name = "Unknown P5R Only fields">;
} TEncounterP5R <name = "Enemy Encounters">;

// Unit table
typedef struct
{
    b16 Flags <name = "Flags">;
    ArcanaID Arcana <name = "Arcana">;
    u8 Unknown1[ 2 ];
    u8 Level <name = "Level">;
    u8 Unknown2[ 2 ];
    u32 Hp <name = "HP">;
    u32 Sp <name = "SP">;
    PersonaStats Stats;
    byte : 1;
    BattleSkill SkillIds[ 8 ] <name = "Battle Skills">;
    u16 ExpReward <name = "EXP Reward">;
    u16 MoneyReward <name = "Money Reward">;
	struct {
	ItemCategory ItemCategory2 <name = "Item Category", comment = "Decide whether you want shadows to drop Skillcard, weapon, armor, consumables, etc">;
	ItemID ItemID2 <name = "Item ID", comment = "The item ID (Decimal) for Shadows to drop">;
	} ItemType <name = "Item Type", comment = "Decide the item category and it's ID"> ;
    u16 DropChance;
    u8 Unknown6[ 18 ];
    b16 Unknown7;
    u16 AttackDamage <name = "Attack Damage">;
} TEnemyUnitStats <name = "Enemy Unit Stats">;

typedef struct
{
    u8 VoiceACBFile <name = "Voice ACB File (minus 1)", comment = "Subtract 1 from the Voice ACB to load">;
    u8 Value;
    VoicePack Pack <name = "Voice Pack">;
    u8 Values[ 21 ];
} TUnitVoiceIndex <name = "Voice Index">;

typedef struct
{
    u16 PersonaIndex <name = "Persona Index", comment = "Persona ID when captured, also it only changes the name but not persona picture if it is below 170 ID">;
    u16 ModelIndex <name = "Model Index", comment = "Model ID">;
} TUnitVisualIndex <name = "Visual Index">;

typedef struct
{
    u16 PersonaIndex <name = "Persona Index", comment = "Persona ID when captured">;
    u16 ModelIndex <name = "Model Index", comment = "Model ID">;
    u16 Unknown <name = "P5R Unk", comment = "New P5R Field">;
} TUnitVisualIndexP5R <name = "Visual Index">;


// Skill
typedef struct
{
    ElementalType Element <name = "Elemental Type", comment = "Magic can also critical if Damage status is set to Strength regardless of Element" >;
    Skill_PassiveOrActive PassiveOrActive <name = "Passive or Active?", comment = "Must be set correctly for the element icon to appear properly, even though it's otherwise redundant">;
    b8 RedundantBitfield_ThanksATLUS <name = "Redundant Bitfield", comment = "Rightmost 4 bits of the bitfield don't do anything. Probably leftovers from early P5 coding.">;
} TSkill_Elements <name = "Skill Elements">;

typedef struct
{
    Skill_CasterEffect1 CasterEffect1 <name = "Caster Effect", comment = "Needs more testing">;
    Skill_CasterEffect2 CasterEffect2 <name = "Caster Effect", comment = "Needs more testing">;
    Skill_AreaType AreaType;
    Skill_DamageStat DamageStat <name = "Damage Stat", comment = "Determines which stat is used to determine damage">;
    Skill_CostType CostType <name = "Cost Type">;
    u8 add256skillcost <name = "Add 256 Cost for each 1 value">;
    u16 SkillCost <name = "Skill Cost", comment = "% of max HP or fixed amount of SP">;
    u8 add256skillcost <name = "Add 256 Cost for each 1 value">;
    Skill_PhysicalOrMagicSkill PhysicalOrMagic <name = "Physical or Magic?", comment = "determines what's affected by either Charge or Concentrate, but doesn't seem to change what's reflected by Tetrakarn or Makarakarn. Needs more testing">;
    Skill_NumberOfTargets NumberOfTargets <name = "Number of Targets">;

    byte : 6;
    bool UsableOnEnemies : 1 <name = "Usable on Enemies">;
    bool UsableOnAllies : 1 <name = "Usable on Allies">;
    Skill_TargetRestrictions TargetRestrictions <name = "Additional Target Restrictions">;
    u8 Unknown <name = "Unknown">;
    u8 Unknown <name = "Unknown">;
    u8 Unknown <name = "Unknown">;
    u8 Unknown <name = "Unknown">;
    u8 Unknown <name = "Unknown">;
    u8 Unknown <name = "Unknown">;
    u8 Unknown <name = "Unknown">;
    u8 Accuracy <name = "Accuracy">;
    u8 MinHits <name = "Minimum Number of Hits">;
    u8 MaxHits <name = "Maximum Number of Hits">;
    Skill_HPEffect HPEffect <name = "Damage/Healing Type">;
    u16 BaseDamage <name = "Base Damage">;
    Skill_SPEffect SPEffect <name = "Deplete or Restore SP?">;
    u8 Unknown <name = "Unknown">;
    u16 SPAmount <name = "SP Amount">;
    Skill_ApplyOrCureEffect ApplyOrCureEffect <name = "Apply or Cure Effect?", comment ="This doesn't apply Effect List 4, 5 and 6">;
    u8 SecondaryEffectChance <name = "Effect Chance">;
    u8 Unknown <name = "Unknown">;

   struct
        {
            bool Unknown : 1 <name = "Unknown">;
            bool Mouse : 1 <name = "Mouse", comment = "Only affects the Phantom Thieves">;
            bool Unknown : 1 <name = "Unknown">;
            bool KnockDown : 1 <name = "Knock Down", comment = "Shock, Weakness and Knockdown can be combined into 1 single ailment. Also gives 1 more if succeed">;
            bool Unconscious : 1 <name = "Unconscious">;
            bool WeakToAllElements : 1 <name = "Weak to all Elements", comment = "Shock,Knockdown,Sleep,Hunger,Forget,Fear,Confuse,Weak,Despair can be combined into 1 single ailment">;
            bool Jealousy : 1 <name = "Jealousy">;
            bool Wrath : 1 <name = "Wrath">;
        } Effect1 <name = "Effect List 1">;

    struct
        {
            bool Lust : 1 <name = "Lust", comment = "Lust, Rage, Berserk can be combined into 1 single ailment">;
            bool Panic : 1 <name = "Panic", comment = "Will cause Shadows to run away">;
            bool Berserk : 1 <name = "Berserk", comment = "Visual effect only. Also, Lust, Rage, Berserk can be combined into 1 single ailment">;
            bool Desparation : 1 <name = "Desparation", comment = "Attack up, Defense down; not affected by other buffs/debuffs">;
            bool Brainwash : 1 <name = "Brainwash">;
            bool Despair : 1 <name = "Despair", comment = "Sleep,Hunger,Forget,Fear,Confuse,Weak,Despair can be combined into 1 single ailment">;
            bool Rage : 1 <name = "Rage", comment = "Lust, Rage, Berserk can be combined into 1 single ailment">;
            bool Sleep : 1 <name = "Sleep", comment = "Sleep,Hunger,Forget,Fear,Confuse,Weak,Despair can be combined into 1 single ailment">;
        } Effect2 <name = "Effect List 2">;

   struct
        {
            bool Hunger : 1 <name = "Hunger", comment = "Sleep,Hunger,Forget,Fear,Confuse,Weak,Despair can be combined into 1 single ailment">;
            bool Forget : 1 <name = "Forget", comment = "Sleep,Hunger,Forget,Fear,Confuse,Weak,Despair can be combined into 1 single ailment">;
            bool Fear : 1 <name = "Fear", comment = "Sleep,Hunger,Forget,Fear,Confuse,Weak,Despair can be combined into 1 single ailment">;
            bool Confuse : 1 <name = "Confuse", comment = "Sleep,Hunger,Forget,Fear,Confuse,Weak,Despair can be combined into 1 single ailment">;
            bool Dizzy : 1 <name = "Dizzy", comment = "Dizzy, Weakness and Knockdown can be combined into 1 single ailment">;
            bool Shock : 1 <name = "Shock", comment = "Shock, Weakness and Knockdown can be combined into 1 single ailment">;
            bool Freeze : 1 <name = "Freeze", comment = "Burn and Freeze can be combined into 1 single ailment">;
            bool Burn : 1 <name = "Burn", comment = "Burn and Freeze can be combined into 1 single ailment">;
        } Effect3 <name = "Effect List 3">;

   struct
        {
            bool CoverPsy : 1 <name = "Cover Psy Weakness", comment = "Changes innate Psy weakness to neutral">;
            bool CoverNuke : 1 <name = "Cover Nuke Weakness", comment = "Changes innate Nuke weakness to neutral">;
            bool CoverWind : 1 <name = "Cover Wind Weakness", comment = "Changes innate Wind weakness to neutral">;
            bool CoverElec : 1 <name = "Cover Electric Weakness", comment = "Changes innate Electric weakness to neutral">;
            bool CoverIce : 1 <name = "Cover Ice Weakness", comment = "Changes innate Ice weakness to neutral">;
            bool CoverFire : 1 <name = "Cover Fire Weakness", comment = "Changes innate Fire weakness to neutral">;
            bool InstakillShield : 1 <name = "Instakill Shield", comment = "Blocks one instakill attack">;
            bool BreakMagicShield : 1 <name = "Break Magic Shield", comment = "Breaks magic-reflecting shields like Makarakarn">;
        } Effect4 <name = "Effect List 4">;

   struct
        {
            bool BreakPhysicalShield : 1 <name = "Break Physical Shield", comment = "Breaks physical-reflecting shields like Tetrakarn">;
            bool AilmentSusceptibility : 1 <name = "Ailment Susceptibility", comment = "increases the likelihood of recieving effects from Effect Lists 2 and 3">;
            bool NegatePsyResist : 1 <name = "Negate Psy Resistance", comment = "Changes innate Psy resistance to neutral; does not override Cover Weakness effects from Effect List 4">;
            bool NegateNukeResist : 1 <name = "Negate Nuke Resistance", comment = "Changes innate Nuke resistance to neutral; does not override Cover Weakness effects from Effect List 4">;
            bool NegateWindResist : 1 <name = "Negate Wind Resistance", comment = "Changes innate Wind resistance to neutral; does not override Cover Weakness effects from Effect List 4">;
            bool NegateElecResist : 1 <name = "Negate Electric Resistance", comment = "Changes innate Electric resistance to neutral; does not override Cover Weakness effects from Effect List 4">;
            bool NegateIceResist : 1 <name = "Negate Ice Resistance", comment = "Changes innate Ice resistance to neutral; does not override Cover Weakness effects from Effect List 4">;
            bool NegateFireResist : 1 <name = "Negate Fire Resistance", comment = "Changes innate Fire resistance to neutral; does not override Cover Weakness effects from Effect List 4">;
        } Effect5 <name = "Effect List 5">;

   struct
        {
            bool MagicShield : 1 <name = "Magic Shield", comment = "Reflects the next magic attack received">;
            bool PhysicalShield : 1 <name = "Physical Shield", comment = "Reflects the next physical attack received">;
            bool CritWayUp : 1 <name = "Critical Chance Way Up">;
            bool CritUp : 1 <name = "Critical Chance Up">;
            bool RemoveDebuffs : 1 <name = "Remove Debuffs", comment = "Removes stat-lowering debuffs from the Buff/Debuff List">;
            bool RemoveBuffs : 1 <name = "Remove Buffs", comment = "Removes stat-raising buffs from the Buff/Debuff List">;
            bool Concentrate : 1 <name = "Concentrate", comment = "Next Magic-based attack deals 2.5x damage">;
            bool Charge : 1 <name = "Charge", comment = "Next Strength-based attack deals 2.5x damage">;
        } Effect6 <name = "Effect List 6">;

    struct
        {
            bool AccuracyDown : 1 <name = "Accuracy Down">;
            bool AccuracyUp : 1 <name = "Accuracy Up">;
            bool DefenseDown : 1 <name = "Defense Down">;
            bool DefenseUp : 1 <name = "Defense Up">;
            bool EvasionDown : 1 <name = "Evasion Down">;
            bool EvasionUp : 1 <name = "Evasion Up">;
            bool AttackDown : 1 <name = "Attack Down">;
            bool AttackUp : 1 <name = "Attack Up">;
        } BuffDebuff <name = "Buffs and Debuffs">;

    Skill_ExtraEffect ExtraEffect <name = "Extra Effects", comment = "Ignore resistance works 100% for Physical. Magic including Light, Dark, Almighty can only Semi Pierce (NULL, DRAIN, REPEL can't be pierced).">;
    u8 CritChance <name = "Crit Chance", comment = "Only works for Physical and Gun">;
    u8 Unknown <name = "Unknown">;
    byte : 1;
} TSkill_ActiveSkillData <name="Active Skill Data: ">;

// Item

typedef struct
{

    struct
        {
            bool Unknown : 1 <name = "Unknown">;
            bool Unknown : 1 <name = "Unknown">;
            bool Gift : 1 <name = "Gift">;
            bool CraftingMaterial : 1 <name = "Crafting Material">;
            bool DungeonItem : 1 <name = "Dungeon Item">;
            bool Outfit : 1 <name = "Outfit">;
            bool SkillCard : 1 <name = "Skill Card">;
            bool Treasure : 1 <name = "Treasure">;
            bool KeyItem : 1 <name = "Key Item">;
            bool Consumable : 1 <name = "Consumable">;
            bool Accessory : 1 <name = "Accessory">;
            bool Armor : 1 <name = "Armor">;
            bool Unknown : 1 <name = "Unknown">;
            bool Revolver2 : 1 <name = "Revolver (Yoshizawa)">;
            bool ToyGun : 1 <name = "Toy Gun (Akechi)">;
            bool GL : 1 <name = "Grenade Launcher (Haru)">;
            bool Revolver : 1 <name = "Revolver (Makoto)">;
            bool AR : 1 <name = "Assault Rifle (Yusuke)">;
            bool Slingshot : 1 <name = "Slingshot (Morgana)">;
            bool SMG : 1 <name = "SMG (Ann)">;
            bool Shotgun : 1 <name = "Shotgun (Ryuji)">;
            bool Handgun : 1 <name = "Handgun (Joker)">;
            bool Unknown : 1 <name = "Unknown">;
            bool Saber : 1 <name = "Saber (Yoshizawa)">;
            bool BeamSword : 1 <name = "Beam Sword (Goro)">;
            bool Axe : 1 <name = "Axe (Haru)">;
            bool FistWeapons : 1 <name = "Fist Weapons (Makoto)">;
            bool Katana : 1 <name = "Katana (Yusuke)">;
            bool BanditSword : 1 <name = "Bandit Sword (Morgana)">;
            bool Whip : 1 <name = "Whip (Ann)">;
            bool Crowbar : 1 <name = "Crowbar (Ryuji)">;
            bool Dagger : 1 <name = "Dagger (Joker)">;
        } Icon <name = "Icon">;


    u32 Field04;
    u16 RESERVE_EquippableUsersBitFlags;
    EquippableUsers Users;
    u16 Field0C;
    u8 Strength <name = "Strength Boost">;
    u8 Magic <name = "Magic Boost">;
    u8 Endurance <name = "Endurance Boost">;
    u8 Agility <name = "Agility Boost">;
    u8 Luck <name = "Luck Boost">;
    u8 RESERVE_Stat;
    GearEffect Effect[3] <name = "Effect">;
    u16 Field1A;
    u16 Field1C;
    u16 RESERVE;
    u32 PurchasePrice <name = "Purchase Price">;
    u32 SellPrice <name = "Sell Price">;
    Month MonthAvailable <name = "Month Available for Purchase">;
    u8 DayAvailable <name = "Day Available for Purchase">;
    u32 Field2A[5];
    u16 Field3E;
} TItem_Accessories <name ="Accessories">;


typedef struct
{

    struct
        {
            bool Unknown : 1 <name = "Unknown">;
            bool Unknown : 1 <name = "Unknown">;
            bool Gift : 1 <name = "Gift">;
            bool CraftingMaterial : 1 <name = "Crafting Material">;
            bool DungeonItem : 1 <name = "Dungeon Item">;
            bool Outfit : 1 <name = "Outfit">;
            bool SkillCard : 1 <name = "Skill Card">;
            bool Treasure : 1 <name = "Treasure">;
            bool KeyItem : 1 <name = "Key Item">;
            bool Consumable : 1 <name = "Consumable">;
            bool Accessory : 1 <name = "Accessory">;
            bool Armor : 1 <name = "Armor">;
            bool Unknown : 1 <name = "Unknown">;
            bool Unknown : 1 <name = "Unknown">;
            bool ToyGun : 1 <name = "Toy Gun (Akechi)">;
            bool GL : 1 <name = "Grenade Launcher (Haru)">;
            bool Revolver : 1 <name = "Revolver (Makoto)">;
            bool AR : 1 <name = "Assault Rifle (Yusuke)">;
            bool Slingshot : 1 <name = "Slingshot (Morgana)">;
            bool SMG : 1 <name = "SMG (Ann)">;
            bool Shotgun : 1 <name = "Shotgun (Ryuji)">;
            bool Handgun : 1 <name = "Handgun (Joker)">;
            bool Unknown : 1 <name = "Unknown">;
            bool Unknown : 1 <name = "Unknown">;
            bool BeamSword : 1 <name = "Beam Sword (Goro)">;
            bool Axe : 1 <name = "Axe (Haru)">;
            bool FistWeapons : 1 <name = "Fist Weapons (Makoto)">;
            bool Katana : 1 <name = "Katana (Yusuke)">;
            bool BanditSword : 1 <name = "Bandit Sword (Morgana)">;
            bool Whip : 1 <name = "Whip (Ann)">;
            bool Crowbar : 1 <name = "Crowbar (Ryuji)">;
            bool Dagger : 1 <name = "Dagger (Joker)">;
        } Icon <name = "Icon">;

    u16 Unknown;
    u16 Unknown;
    u16 RESERVE_EquippableUsersBitFlags;
    EquippableUsers Users;
    u16 Unknown;
    u16 ArmorDefense <name = "Defense">;
    u16 ArmorEvasion <name = "Evasion">;
    u8 ArmorStrength <name = "Strength Boost">;
    u8 ArmorMagic <name = "Magic Boost">;
    u8 ArmorEndurance <name = "Endurance Boost">;
    u8 ArmorAgility <name = "Agility Boost">;
    u8 ArmorLuck <name = "Luck Boost">;
    u8 Unknown;
    GearEffect Effect <name = "Effect">;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    u32 PurchasePrice <name = "Purchase Price">;
    u32 SellPrice <name = "Sell Price">;
    Month MonthAvailable <name = "Month Available for Purchase">;
    u8 DayAvailable <name = "Day Available for Purchase">;
    u16 Unknown;
} TItem_Armor <name ="Armor">;

typedef struct
{

    struct
        {
            bool Unknown : 1 <name = "Unknown">;
            bool Unknown : 1 <name = "Unknown">;
            bool Gift : 1 <name = "Gift">;
            bool CraftingMaterial : 1 <name = "Crafting Material">;
            bool DungeonItem : 1 <name = "Dungeon Item">;
            bool Outfit : 1 <name = "Outfit">;
            bool SkillCard : 1 <name = "Skill Card">;
            bool Treasure : 1 <name = "Treasure">;
            bool KeyItem : 1 <name = "Key Item">;
            bool Consumable : 1 <name = "Consumable">;
            bool Accessory : 1 <name = "Accessory">;
            bool Armor : 1 <name = "Armor">;
            bool Unknown : 1 <name = "Unknown">;
            bool Unknown : 1 <name = "Unknown">;
            bool ToyGun : 1 <name = "Toy Gun (Akechi)">;
            bool GL : 1 <name = "Grenade Launcher (Haru)">;
            bool Revolver : 1 <name = "Revolver (Makoto)">;
            bool AR : 1 <name = "Assault Rifle (Yusuke)">;
            bool Slingshot : 1 <name = "Slingshot (Morgana)">;
            bool SMG : 1 <name = "SMG (Ann)">;
            bool Shotgun : 1 <name = "Shotgun (Ryuji)">;
            bool Handgun : 1 <name = "Handgun (Joker)">;
            bool Unknown : 1 <name = "Unknown">;
            bool Unknown : 1 <name = "Unknown">;
            bool BeamSword : 1 <name = "Beam Sword (Goro)">;
            bool Axe : 1 <name = "Axe (Haru)">;
            bool FistWeapons : 1 <name = "Fist Weapons (Makoto)">;
            bool Katana : 1 <name = "Katana (Yusuke)">;
            bool BanditSword : 1 <name = "Bandit Sword (Morgana)">;
            bool Whip : 1 <name = "Whip (Ann)">;
            bool Crowbar : 1 <name = "Crowbar (Ryuji)">;
            bool Dagger : 1 <name = "Dagger (Joker)">;
        } Icon <name = "Icon">;

    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    Usability Availability <name = "Availability", comment = "Set if it is able to use in battle or field or none">;
    BattleSkill Skill <name = "Battle Skill", comment = "Set the item to use the skill">;
    u16 Unknown;
    u32 PurchasePrice <name = "Purchase Price">;
    u32 SellPrice <name = "Sell Price">;
    Month MonthAvailable <name = "Month Available for Purchase">;
    u8 DayAvailable <name = "Day Available for Purchase">;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
} TItem_Consumables <name ="Consumables">;

typedef struct
{

struct
    {
        bool Unknown : 1 <name = "Unknown">;
        bool Unknown : 1 <name = "Unknown">;
        bool Gift : 1 <name = "Gift">;
        bool CraftingMaterial : 1 <name = "Crafting Material">;
        bool DungeonItem : 1 <name = "Dungeon Item">;
        bool Outfit : 1 <name = "Outfit">;
        bool SkillCard : 1 <name = "Skill Card">;
        bool Treasure : 1 <name = "Treasure">;
        bool KeyItem : 1 <name = "Key Item">;
        bool Consumable : 1 <name = "Consumable">;
        bool Accessory : 1 <name = "Accessory">;
        bool Armor : 1 <name = "Armor">;
        bool Unknown : 1 <name = "Unknown">;
        bool Unknown : 1 <name = "Unknown">;
        bool ToyGun : 1 <name = "Toy Gun (Akechi)">;
        bool GL : 1 <name = "Grenade Launcher (Haru)">;
        bool Revolver : 1 <name = "Revolver (Makoto)">;
        bool AR : 1 <name = "Assault Rifle (Yusuke)">;
        bool Slingshot : 1 <name = "Slingshot (Morgana)">;
        bool SMG : 1 <name = "SMG (Ann)">;
        bool Shotgun : 1 <name = "Shotgun (Ryuji)">;
        bool Handgun : 1 <name = "Handgun (Joker)">;
        bool Unknown : 1 <name = "Unknown">;
        bool Unknown : 1 <name = "Unknown">;
        bool BeamSword : 1 <name = "Beam Sword (Goro)">;
        bool Axe : 1 <name = "Axe (Haru)">;
        bool FistWeapons : 1 <name = "Fist Weapons (Makoto)">;
        bool Katana : 1 <name = "Katana (Yusuke)">;
        bool BanditSword : 1 <name = "Bandit Sword (Morgana)">;
        bool Whip : 1 <name = "Whip (Ann)">;
        bool Crowbar : 1 <name = "Crowbar (Ryuji)">;
        bool Dagger : 1 <name = "Dagger (Joker)">;
    } Icon <name = "Icon">;

    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
} TItem_KeyItems <name ="Key Items">;

typedef struct
{

struct
    {
        bool Unknown : 1 <name = "Unknown">;
        bool Unknown : 1 <name = "Unknown">;
        bool Gift : 1 <name = "Gift">;
        bool CraftingMaterial : 1 <name = "Crafting Material">;
        bool DungeonItem : 1 <name = "Dungeon Item">;
        bool Outfit : 1 <name = "Outfit">;
        bool SkillCard : 1 <name = "Skill Card">;
        bool Treasure : 1 <name = "Treasure">;
        bool KeyItem : 1 <name = "Key Item">;
        bool Consumable : 1 <name = "Consumable">;
        bool Accessory : 1 <name = "Accessory">;
        bool Armor : 1 <name = "Armor">;
        bool Unknown : 1 <name = "Unknown">;
        bool Unknown : 1 <name = "Unknown">;
        bool ToyGun : 1 <name = "Toy Gun (Akechi)">;
        bool GL : 1 <name = "Grenade Launcher (Haru)">;
        bool Revolver : 1 <name = "Revolver (Makoto)">;
        bool AR : 1 <name = "Assault Rifle (Yusuke)">;
        bool Slingshot : 1 <name = "Slingshot (Morgana)">;
        bool SMG : 1 <name = "SMG (Ann)">;
        bool Shotgun : 1 <name = "Shotgun (Ryuji)">;
        bool Handgun : 1 <name = "Handgun (Joker)">;
        bool Unknown : 1 <name = "Unknown">;
        bool Unknown : 1 <name = "Unknown">;
        bool BeamSword : 1 <name = "Beam Sword (Goro)">;
        bool Axe : 1 <name = "Axe (Haru)">;
        bool FistWeapons : 1 <name = "Fist Weapons (Makoto)">;
        bool Katana : 1 <name = "Katana (Yusuke)">;
        bool BanditSword : 1 <name = "Bandit Sword (Morgana)">;
        bool Whip : 1 <name = "Whip (Ann)">;
        bool Crowbar : 1 <name = "Crowbar (Ryuji)">;
        bool Dagger : 1 <name = "Dagger (Joker)">;
    } Icon <name = "Icon">;

    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    u32 PurchasePrice <name = "Purchase Price">;
    u32 SellPrice <name = "Sell Price">;
    Month MonthAvailable <name = "Month Available for Purchase">;
    u8 DayAvailable <name = "Day Available for Purchase">;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
} TItem_Materials <name ="Materials">;

typedef struct
{

    struct
	{
		bool Unknown : 1 <name = "Unknown">;
		bool Unknown : 1 <name = "Unknown">;
		bool Gift : 1 <name = "Gift">;
		bool CraftingMaterial : 1 <name = "Crafting Material">;
		bool DungeonItem : 1 <name = "Dungeon Item">;
		bool Outfit : 1 <name = "Outfit">;
		bool SkillCard : 1 <name = "Skill Card">;
		bool Treasure : 1 <name = "Treasure">;
		bool KeyItem : 1 <name = "Key Item">;
		bool Consumable : 1 <name = "Consumable">;
		bool Accessory : 1 <name = "Accessory">;
		bool Armor : 1 <name = "Armor">;
		bool Unknown : 1 <name = "Unknown">;
		bool Unknown : 1 <name = "Unknown">;
		bool ToyGun : 1 <name = "Toy Gun (Akechi)">;
		bool GL : 1 <name = "Grenade Launcher (Haru)">;
		bool Revolver : 1 <name = "Revolver (Makoto)">;
		bool AR : 1 <name = "Assault Rifle (Yusuke)">;
		bool Slingshot : 1 <name = "Slingshot (Morgana)">;
		bool SMG : 1 <name = "SMG (Ann)">;
		bool Shotgun : 1 <name = "Shotgun (Ryuji)">;
		bool Handgun : 1 <name = "Handgun (Joker)">;
		bool Unknown : 1 <name = "Unknown">;
		bool Unknown : 1 <name = "Unknown">;
		bool BeamSword : 1 <name = "Beam Sword (Goro)">;
		bool Axe : 1 <name = "Axe (Haru)">;
		bool FistWeapons : 1 <name = "Fist Weapons (Makoto)">;
		bool Katana : 1 <name = "Katana (Yusuke)">;
		bool BanditSword : 1 <name = "Bandit Sword (Morgana)">;
		bool Whip : 1 <name = "Whip (Ann)">;
		bool Crowbar : 1 <name = "Crowbar (Ryuji)">;
		bool Dagger : 1 <name = "Dagger (Joker)">;
	} Icon <name = "Icon">;

    u32 field_0x4;
    u16 RESERVE_EquippableUsersBitFlags;
    EquippableUsers Users;
    u16 field_0xc;
    u16 field_0xe;
    u16 Attack <name = "Attack">;
    u16 Accuracy <name = "Accuracy">;
    PersonaStats BonusStats;
    u8 DummyStat;
    GearEffect Effect[3] <name = "Effect">;
    u16 field_0x20;
    u16 field_0x22;
    u32 PurchasePrice <name = "Purchase Price">;
    u32 SellPrice <name = "Sell Price">;
    Month MonthAvailable <name = "Month Available for Purchase">;
    u8 DayAvailable <name = "Day Available for Purchase">;
    u16 field_0x2e;
} TItem_MeleeWeapons <name ="Melee Weapons">;

typedef struct
{

    struct
	{
		bool Unknown : 1 <name = "Unknown">;
		bool Unknown : 1 <name = "Unknown">;
		bool Gift : 1 <name = "Gift">;
		bool CraftingMaterial : 1 <name = "Crafting Material">;
		bool DungeonItem : 1 <name = "Dungeon Item">;
		bool Outfit : 1 <name = "Outfit">;
		bool SkillCard : 1 <name = "Skill Card">;
		bool Treasure : 1 <name = "Treasure">;
		bool KeyItem : 1 <name = "Key Item">;
		bool Consumable : 1 <name = "Consumable">;
		bool Accessory : 1 <name = "Accessory">;
		bool Armor : 1 <name = "Armor">;
		bool Unknown : 1 <name = "Unknown">;
		bool Unknown : 1 <name = "Unknown">;
		bool ToyGun : 1 <name = "Toy Gun (Akechi)">;
		bool GL : 1 <name = "Grenade Launcher (Haru)">;
		bool Revolver : 1 <name = "Revolver (Makoto)">;
		bool AR : 1 <name = "Assault Rifle (Yusuke)">;
		bool Slingshot : 1 <name = "Slingshot (Morgana)">;
		bool SMG : 1 <name = "SMG (Ann)">;
		bool Shotgun : 1 <name = "Shotgun (Ryuji)">;
		bool Handgun : 1 <name = "Handgun (Joker)">;
		bool Unknown : 1 <name = "Unknown">;
		bool Unknown : 1 <name = "Unknown">;
		bool BeamSword : 1 <name = "Beam Sword (Goro)">;
		bool Axe : 1 <name = "Axe (Haru)">;
		bool FistWeapons : 1 <name = "Fist Weapons (Makoto)">;
		bool Katana : 1 <name = "Katana (Yusuke)">;
		bool BanditSword : 1 <name = "Bandit Sword (Morgana)">;
		bool Whip : 1 <name = "Whip (Ann)">;
		bool Crowbar : 1 <name = "Crowbar (Ryuji)">;
		bool Dagger : 1 <name = "Dagger (Joker)">;
	} Icon <name = "Icon">;

    u32 field_0x4;
    u16 RESERVE_EquippableUsersBitFlags;
    EquippableUsers Users;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
} TItem_Outfits <name ="Outfits">;

typedef struct
{

    struct
	{
		bool Unknown : 1 <name = "Unknown">;
		bool Unknown : 1 <name = "Unknown">;
		bool Gift : 1 <name = "Gift">;
		bool CraftingMaterial : 1 <name = "Crafting Material">;
		bool DungeonItem : 1 <name = "Dungeon Item">;
		bool Outfit : 1 <name = "Outfit">;
		bool SkillCard : 1 <name = "Skill Card">;
		bool Treasure : 1 <name = "Treasure">;
		bool KeyItem : 1 <name = "Key Item">;
		bool Consumable : 1 <name = "Consumable">;
		bool Accessory : 1 <name = "Accessory">;
		bool Armor : 1 <name = "Armor">;
		bool Unknown : 1 <name = "Unknown">;
		bool Unknown : 1 <name = "Unknown">;
		bool ToyGun : 1 <name = "Toy Gun (Akechi)">;
		bool GL : 1 <name = "Grenade Launcher (Haru)">;
		bool Revolver : 1 <name = "Revolver (Makoto)">;
		bool AR : 1 <name = "Assault Rifle (Yusuke)">;
		bool Slingshot : 1 <name = "Slingshot (Morgana)">;
		bool SMG : 1 <name = "SMG (Ann)">;
		bool Shotgun : 1 <name = "Shotgun (Ryuji)">;
		bool Handgun : 1 <name = "Handgun (Joker)">;
		bool Unknown : 1 <name = "Unknown">;
		bool Unknown : 1 <name = "Unknown">;
		bool BeamSword : 1 <name = "Beam Sword (Goro)">;
		bool Axe : 1 <name = "Axe (Haru)">;
		bool FistWeapons : 1 <name = "Fist Weapons (Makoto)">;
		bool Katana : 1 <name = "Katana (Yusuke)">;
		bool BanditSword : 1 <name = "Bandit Sword (Morgana)">;
		bool Whip : 1 <name = "Whip (Ann)">;
		bool Crowbar : 1 <name = "Crowbar (Ryuji)">;
		bool Dagger : 1 <name = "Dagger (Joker)">;
	} Icon <name = "Icon">;

    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    BattleSkill Skill;
    u16 Unknown;
    u16 Unknown;
    u32 PurchasePrice;
    u32 SellPrice;
} TItem_SkillCards <name ="Skill Cards">;

typedef struct
{

    struct
	{
		bool Unknown : 1 <name = "Unknown">;
		bool Unknown : 1 <name = "Unknown">;
		bool Gift : 1 <name = "Gift">;
		bool CraftingMaterial : 1 <name = "Crafting Material">;
		bool DungeonItem : 1 <name = "Dungeon Item">;
		bool Outfit : 1 <name = "Outfit">;
		bool SkillCard : 1 <name = "Skill Card">;
		bool Treasure : 1 <name = "Treasure">;
		bool KeyItem : 1 <name = "Key Item">;
		bool Consumable : 1 <name = "Consumable">;
		bool Accessory : 1 <name = "Accessory">;
		bool Armor : 1 <name = "Armor">;
		bool Unknown : 1 <name = "Unknown">;
		bool Unknown : 1 <name = "Unknown">;
		bool ToyGun : 1 <name = "Toy Gun (Akechi)">;
		bool GL : 1 <name = "Grenade Launcher (Haru)">;
		bool Revolver : 1 <name = "Revolver (Makoto)">;
		bool AR : 1 <name = "Assault Rifle (Yusuke)">;
		bool Slingshot : 1 <name = "Slingshot (Morgana)">;
		bool SMG : 1 <name = "SMG (Ann)">;
		bool Shotgun : 1 <name = "Shotgun (Ryuji)">;
		bool Handgun : 1 <name = "Handgun (Joker)">;
		bool Unknown : 1 <name = "Unknown">;
		bool Unknown : 1 <name = "Unknown">;
		bool BeamSword : 1 <name = "Beam Sword (Goro)">;
		bool Axe : 1 <name = "Axe (Haru)">;
		bool FistWeapons : 1 <name = "Fist Weapons (Makoto)">;
		bool Katana : 1 <name = "Katana (Yusuke)">;
		bool BanditSword : 1 <name = "Bandit Sword (Morgana)">;
		bool Whip : 1 <name = "Whip (Ann)">;
		bool Crowbar : 1 <name = "Crowbar (Ryuji)">;
		bool Dagger : 1 <name = "Dagger (Joker)">;
	} Icon <name = "Icon">;

    u32 field_0x4;
    u16 RESERVE_EquippableUsersBitFlags;
    EquippableUsers Users;
    u16 field_0xc;
    u8 field_0xe;
    u8 Unused;
    u16 Attack <name = "Attack">;
    u16 Accuracy <name = "Accuracy">;
    u16 Rounds <name = "Rounds">;
    PersonaStats BonusStats;
    u8 DummyStat;
    GearEffect Effect[3] <name = "Effect">;
    u16 field_0x22;
    u16 field_0x24;
    u16 RESERVE;
    u32 PurchasePrice <name = "Purchase Price">;
    u32 SellPrice <name = "Sell Price">;
    Month MonthAvailable <name = "Month Available for Purchase">;
    u8 DayAvailable <name = "Day Available for Purchase">;
    u16 field_0x32;
} TItem_RangedWeapons <name ="Ranged Weapons">;

typedef struct
{
    u8 Unknown;
} TItem_Footer <name ="Footer">;

// VISUAL.TBL

typedef struct
{
	s16 AttackHitRegFrames [ 8 ];
	s16 AttackAnimationSpeed;
	s16 DistanceFromTarget;
    s16 UnkValues1 [ 2 ];
    s16 CriticalHitRegFrames [ 8 ];
    s16 AttackAnimationSpeed;
	s16 DistanceFromTarget;
    s16 UnkValues2 [ 2 ];
    s16 AmbushedAttackHitRegFrames [ 8 ];
    s16 AttackAnimationSpeed;
	s16 DistanceFromTarget;
    s16 UnkValues3 [ 2 ];
}TVisual_AttackFrameData <name = "Attack Frame Data">;

typedef struct
{
    u32 Field00;
    f32 HeartIconXAxis<name="Heart Icon location(X axis)">;
    f32 HeartIconYAxis<name="Heart Icon location(Y axis)">;
    f32 HeartIconZAxis<name="Heart Icon location(Z axis)">;;
    f32 Field10;
    f32 Field14;
    f32 Field18;
    f32 Field1C;
    f32 Field20;
    f32 Field24;
    f32 Field28;
    f32 Field2C;
    f32 Field30;
    f32 Field34;
    f32 Field38;
    f32 Field3C;
    f32 Field40;
    f32 Field44;
    f32 Field48;
    f32 Field4C;
    f32 Field50;
    f32 Field54;
    f32 Field58;
    f32 Field5C;
    f32 Field60;
    f32 Field64;
    u16 ModelScale<name="Model Scale %">;
    u16 Field6A;
    u16 Field6C;
    u16 Field6E;
    f32 Field70;
    f32 Field74;
    f32 Field78;
    f32 Field7C;
    TVisual_AttackFrameData FrameData;
} TVisual_EnemyVisualVariablesA <name = "Enemy Visual Variables A">;

typedef struct
{
    byte Unknown[ 0x104 ];
	u16 ModelScale<name="Model Scale %">;
    u16 Field6A;
    u16 Field6C;
    u16 Field6E;
    f32 Field70;
    f32 Field74;
    f32 Field78;
    f32 Field7C;
    TVisual_AttackFrameData FrameData;
	byte Unknown2 [ 0x30 ];
} TVisual_PlayerVisualVariablesA <name = "Player Visual Variables A">;

typedef struct
{
    u8 Padding1 [ 4 ];
    u8 Unknown;
    u8 Unknown;
    u8 Padding;
    u8 Padding;
    u8 Unknown;
    u8 Unknown;
    u8 Padding2 [ 2 ];
    u8 Unknown;
    u8 Unknown;
    u8 Padding;
    u8 Padding;
    u8 Unknown;
    u8 Unknown;
    u8 Unknown;
    u8 Unknown;
    u8 Unknown;
    u8 Unknown;
    u8 Padding3 [ 2 ];
    u8 Unknown;
    u8 Unknown;
    u8 Padding;
    u8 Padding;
    u8 Unknown;
    u8 Unknown;
    u8 Padding4 [ 2 ];
    u8 Unknown;
    u8 Unknown;
    u8 Padding;
    u8 Padding;
    u8 Unknown;
    u8 Unknown;
    u16 Unknown;
    u8 Unknown;
    u8 Unknown;
    u8 Padding5 [ 2 ];
    u8 Unknown;
    u8 Unknown;
    u8 Padding;
    u8 Padding;
    u8 Unknown;
    u8 Unknown;
    u16 Unknown;
    u8 Unknown;
    u8 Unknown;
    u16 Unknown;
    u8 Unknown;
    u8 Unknown;
    u16 Unknown;
    u8 Unknown;
    u8 Unknown;
    u8 Padding6 [ 2 ];
    u8 Unknown;
    u8 Unknown;
    u8 Padding;
    u8 Padding;
    u8 Unknown;
    u8 Unknown;
    u8 Padding7 [ 2 ];
    u8 Unknown;
    u8 Unknown;
    u8 Padding;
    u8 Padding;
    u8 Unknown;
    u8 Unknown;
    u16 Unknown;
    u8 Unknown;
    u8 Unknown;
    byte Unknown;
    byte Unknown;
    byte Unknown;
    byte Unknown;
    byte Unknown;
    byte Unknown;
    byte Unknown;
    byte Unknown;
    byte Unknown;
    byte Unknown;
    byte Unknown;
    byte Unknown;
    byte Unknown;
    byte Unknown;
    short BattleModelScale <name="Persona Model Scale % (Battle)">;
    short Unknown;
    short Unknown;
    short Unknown;
    short Unknown;
    short Unknown;
    short Unknown;
    short Unknown;
    short Unknown;
    short Unknown;
    short Unknown;
    short Unknown;
    short Unknown;
    short Unknown;
    short Unknown;
    short Unknown;
    short Unknown;
    short Unknown;
    short Unknown;
    short Unknown;
    short Unknown;
    short Unknown;
    short Unknown;
    short Unknown;
    short Unknown;
    byte Unknown;
    byte Unknown;
} TVisual_PersonaVisualVariablesA <name = "Persona Visual Variables A">;

typedef struct
{
    u8 Unknown[ 648 ];
} TVisual_PlayerVisualVariablesB <name = "Player Visual Variables B">;

typedef struct
{
    struct
    {
        u32 Field00;
        u32 Field04;
        f32 Field08[16];
    } Entries[5];
} TVisual_EnemyVisualVariablesB <name = "Enemy Visual Variables B">;

typedef struct
{
    u8 Unknown[ 576 ];
} TVisual_PersonaVisualVariablesB <name = "Persona Visual Variables B">;

//---------------------------------------------
// Parse file structure
//---------------------------------------------
enum TableSegmentType
{
    TableSegmentType_Unknown,
    TableSegmentType_Persona_Stats,
    TableSegmentType_Persona_SkillsAndStatGrowths,
    TableSegmentType_Persona_PartyLevelUpThresholds,
    TableSegmentType_Persona_PartyPersonas,
    TableSegmentType_Player_LevelUpThresholds,
    TableSegmentType_Player_HPSPPerLevel,
    TableSegmentType_Exist_Segment1,
    TableSegmentType_Exist_Segment2,
    TableSegmentType_Elsai_Segment0,
    TableSegmentType_Elsai_Segment1,
    TableSegmentType_AICalc_Segment1,
    TableSegmentType_AICalc_Segment2,
    TableSegmentType_AICalc_Segment3,
    TableSegmentType_AICalc_Segment4,
    TableSegmentType_AICalc_Segment5,
    TableSegmentType_AICalc_Segment6,
    TableSegmentType_AICalc_Segment7,
    TableSegmentType_Encounter,
    TableSegmentType_Skill_Elements,
    TableSegmentType_Skill_ActiveSkillData,
    TableSegmentType_Item_Accessories,
    TableSegmentType_Item_Armor,
    TableSegmentType_Item_Consumables,
    TableSegmentType_Item_KeyItems,
    TableSegmentType_Item_Materials,
    TableSegmentType_Item_MeleeWeapons,
    TableSegmentType_Item_Outfits,
    TableSegmentType_Item_SkillCards,
    TableSegmentType_Item_RangedWeapons,
    TableSegmentType_Item_Footer,
    TableSegmentType_Unit_EnemyUnitStats,
    TableSegmentType_Unit_EnemyElementalAffinities,
    TableSegmentType_Unit_PersonaElementalAffinities,
    TableSegmentType_Unit_VoiceIndex,
    TableSegmentType_Unit_VisualIndex,
    TableSegmentType_Visual_EnemyVisualVariablesA,
    TableSegmentType_Visual_PlayerVisualVariablesA,
    TableSegmentType_Visual_PersonaVisualVariablesA,
    TableSegmentType_Visual_PlayerVisualVariablesB,
    TableSegmentType_Visual_EnemyVisualVariablesB,
    TableSegmentType_Visual_PersonaVisualVariablesB,
};

typedef struct( TableSegmentType _type )
{
    uint Size;
    local TableSegmentType type = _type; // for debugging

    switch ( type )
    {
        case TableSegmentType_Persona_Stats:
            TPersonaStats Stats[ Size / sizeof( TPersonaStats ) ];
            break;

        case TableSegmentType_Persona_SkillsAndStatGrowths:
            TPersonaSkillsAndStatGrowths SkillsAndStatGrowths[ Size / sizeof( TPersonaSkillsAndStatGrowths ) ];
            break;

        case TableSegmentType_Persona_PartyLevelUpThresholds:
            TPersonaLevelUpThresholds PartyLevelUpThresholds[ Size / sizeof( TPersonaLevelUpThresholds ) ];
            break;

        case TableSegmentType_Persona_PartyPersonas:
            TPersonaPartyPersonas PartyPersonas[ Size / sizeof( TPersonaPartyPersonas ) ];
            break;

        case TableSegmentType_Player_LevelUpThresholds:
            TPlayer_LevelUpThresholds LevelUpThresholds[ Size / sizeof( TPlayer_LevelUpThresholds ) ];
            break;

        case TableSegmentType_Player_HPSPPerLevel:
            TPlayer_HPSPPerLevel HPSPPerLevel[ Size / sizeof( TPlayer_HPSPPerLevel ) ];
            break;

        case TableSegmentType_Exist_Segment1:
            TExist_Segment1 Entries[ Size / sizeof( TExist_Segment1 ) ];
            break;

        case TableSegmentType_Exist_Segment2:
            TExist_Segment2 Entries[ Size / sizeof( TExist_Segment2 ) ];
            break;

        case TableSegmentType_Elsai_Segment0:
            TElsaiSegment1Entry Entries[ Size / sizeof( TElsaiSegment1Entry ) ];
            break;

        case TableSegmentType_Elsai_Segment1:
            TElsaiSegment2Entry Entries[ Size / sizeof( TElsaiSegment2Entry ) ];
            break;

        case TableSegmentType_AICalc_Segment1:
            TAICalc_Segment1 Entries[ Size / sizeof( TAICalc_Segment1 ) ];
            break;

        case TableSegmentType_AICalc_Segment2:
            TAICalc_Segment2 Entries[ Size / sizeof( TAICalc_Segment2 ) ];
            break;

        case TableSegmentType_AICalc_Segment3:
            TAICalc_Segment3 Entries[ Size / sizeof( TAICalc_Segment3 ) ];
            break;

        case TableSegmentType_AICalc_Segment4:
            TAICalc_Segment4 Entries[ Size / sizeof( TAICalc_Segment4 ) ];
            break;

        case TableSegmentType_AICalc_Segment5:
            TAICalc_Segment5 Entries[ Size / sizeof( TAICalc_Segment5 ) ];
            break;

        case TableSegmentType_AICalc_Segment6:
            TAICalc_Segment6 Entries[ Size / sizeof( TAICalc_Segment6 ) ];
            break;

        case TableSegmentType_AICalc_Segment7:
            TAICalc_Segment7 Entries[ Size / sizeof( TAICalc_Segment7 ) ];
            break;

        case TableSegmentType_Encounter:
		    if (Size == 44000)
			{
				TEncounterP5R TEncounters[ 1000 ];
			}
			else
            TEncounter TEncounters[ Size / sizeof( TEncounter ) ];
            break;

        case TableSegmentType_Skill_Elements:
            TSkill_Elements Skill[ Size / sizeof( TSkill_Elements ) ];
            break;

        case TableSegmentType_Skill_ActiveSkillData:
            TSkill_ActiveSkillData Skill[ Size / sizeof( TSkill_ActiveSkillData ) ];
            break;

        case TableSegmentType_Item_Accessories:
            TItem_Accessories Accessories[ Size / sizeof( TItem_Accessories ) ];
            break;

        case TableSegmentType_Item_Armor:
            TItem_Armor Armor[ Size / sizeof( TItem_Armor ) ];
            break;

        case TableSegmentType_Item_Consumables:
            TItem_Consumables Consumables[ Size / sizeof( TItem_Consumables ) ];
            break;

        case TableSegmentType_Item_KeyItems:
            TItem_KeyItems KeyItems[ Size / sizeof( TItem_KeyItems ) ];
            break;

        case TableSegmentType_Item_Materials:
            TItem_Materials Materials[ Size / sizeof( TItem_Materials ) ];
            break;


        case TableSegmentType_Item_MeleeWeapons:
            TItem_MeleeWeapons MeleeWeapons[ Size / sizeof( TItem_MeleeWeapons ) ];
            break;


        case TableSegmentType_Item_Outfits:
            TItem_Outfits Outfits[ Size / sizeof( TItem_Outfits ) ];
            break;


        case TableSegmentType_Item_SkillCards:
            TItem_SkillCards SkillCards[ Size / sizeof( TItem_SkillCards ) ];
            break;


        case TableSegmentType_Item_RangedWeapons:
            TItem_RangedWeapons RangedWeapons[ Size / sizeof( TItem_RangedWeapons ) ];
            break;


        case TableSegmentType_Item_Footer:
            TItem_Footer Footer[ Size / sizeof( TItem_Footer ) ];
            break;


        case TableSegmentType_Unit_EnemyUnitStats:
            TEnemyUnitStats Stats[ Size / sizeof( TEnemyUnitStats ) ];
            break;

        case TableSegmentType_Unit_EnemyElementalAffinities:
            ElementalAffinities Affinities[ Size / sizeof( ElementalAffinities ) ];
            break;

        case TableSegmentType_Unit_PersonaElementalAffinities:
            ElementalAffinities Affinities[ Size / sizeof( ElementalAffinities ) ];
            break;

        case TableSegmentType_Unit_VoiceIndex:
            TUnitVoiceIndex Entries[ Size / sizeof( TUnitVoiceIndex ) ];
            break;

        case TableSegmentType_Unit_VisualIndex:
            if (Size == 4698) // P5R
			{
				TUnitVisualIndexP5R VisualIndices[ 783 ];
			}
			else TUnitVisualIndex VisualIndices[ Size / sizeof( TUnitVisualIndex ) ];
            break;

        case TableSegmentType_Visual_EnemyVisualVariablesA:
            TVisual_EnemyVisualVariablesA Data[ Size / sizeof( TVisual_EnemyVisualVariablesA ) ];
            break;

        case TableSegmentType_Visual_PlayerVisualVariablesA:
            TVisual_PlayerVisualVariablesA Data[ Size / sizeof( TVisual_PlayerVisualVariablesA ) ];
            break;

        case TableSegmentType_Visual_PersonaVisualVariablesA:
            TVisual_PersonaVisualVariablesA Data[ Size / sizeof( TVisual_PersonaVisualVariablesA ) ];
            break;

        case TableSegmentType_Visual_PlayerVisualVariablesB:
            TVisual_PlayerVisualVariablesB Data[ Size / sizeof( TVisual_PlayerVisualVariablesB ) ];
            break;

        case TableSegmentType_Visual_EnemyVisualVariablesB:
            TVisual_EnemyVisualVariablesB Data[ Size / sizeof( TVisual_EnemyVisualVariablesB ) ];
            break;

        case TableSegmentType_Visual_PersonaVisualVariablesB:
            TVisual_PersonaVisualVariablesB Data[ Size / sizeof( TVisual_PersonaVisualVariablesB ) ];
            break;

        default:
            byte Data[ Size ];
    }

    FAlign( 16 );
} TTableSegment <read=TableSegmentToString>;

string TableSegmentToString( TTableSegment& segment )
{
    return EnumToString( segment.type );
}

typedef struct( string tableName, u32 endOffset )
{
    local int segmentIndex = 0;
    local TableSegmentType segmentType;

    while ( FTell() < endOffset )
    {
        segmentType = TableSegmentType_Unknown;
        if ( !Stricmp( tableName, "persona" ) )
        {
            switch ( segmentIndex )
            {
                case 0: segmentType = TableSegmentType_Persona_Stats; break;
                case 1: segmentType = TableSegmentType_Persona_SkillsAndStatGrowths; break;
                case 2: segmentType = TableSegmentType_Persona_PartyLevelUpThresholds; break;
                case 3: segmentType = TableSegmentType_Persona_PartyPersonas; break;
            }
        }
        else if ( !Stricmp( tableName, "player" ) )
        {
            switch ( segmentIndex )
            {
                case 0: segmentType = TableSegmentType_Player_LevelUpThresholds; break;
                case 1: segmentType = TableSegmentType_Player_HPSPPerLevel; break;
            }
        }
        else if ( !Stricmp( tableName, "exist" ) )
        {
            switch ( segmentIndex )
            {
                case 0: segmentType = TableSegmentType_Exist_Segment1; break;  // why tf isn't this working, arggghh
                case 1: segmentType = TableSegmentType_Exist_Segment2; break;  // why tf isn't this working, arggghh
            }
        }
        else if ( !Stricmp( tableName, "elsai" ) )
        {
            switch ( segmentIndex )
            {
                case 0: segmentType = TableSegmentType_Elsai_Segment0; break;
                case 1: segmentType = TableSegmentType_Elsai_Segment1; break;
            }
        }
        else if ( !Stricmp( tableName, "aicalc" ) )
        {
            switch ( segmentIndex )
            {
                case 0: segmentType = TableSegmentType_AICalc_Segment1; break;
                case 1: segmentType = TableSegmentType_AICalc_Segment2; break;
                case 2: segmentType = TableSegmentType_AICalc_Segment3; break;
                case 3: segmentType = TableSegmentType_AICalc_Segment4; break;
                case 4: segmentType = TableSegmentType_AICalc_Segment5; break;
                case 5: segmentType = TableSegmentType_AICalc_Segment6; break;
                case 6: segmentType = TableSegmentType_AICalc_Segment7; break;
            }
        }
        else if ( !Stricmp( tableName, "encount" ) )
        {
            switch ( segmentIndex )
            {
                case 0: segmentType = TableSegmentType_Encounter; break;
            }
        }
        else if ( !Stricmp( tableName, "skill" ) )
        {
            switch ( segmentIndex )
            {
                case 0: segmentType = TableSegmentType_Skill_Elements; break;
                case 1: segmentType = TableSegmentType_Skill_ActiveSkillData; break;
            }
        }
        else if ( !Stricmp( tableName, "item" ) )
        {
            switch ( segmentIndex )
            {
                case 0: segmentType = TableSegmentType_Item_Accessories; break;
                case 1: segmentType = TableSegmentType_Item_Armor; break;
                case 2: segmentType = TableSegmentType_Item_Consumables; break;
                case 3: segmentType = TableSegmentType_Item_KeyItems; break;
                case 4: segmentType = TableSegmentType_Item_Materials; break;
                case 5: segmentType = TableSegmentType_Item_MeleeWeapons; break;
                case 6: segmentType = TableSegmentType_Item_Outfits; break;
                case 7: segmentType = TableSegmentType_Item_SkillCards; break;
                case 8: segmentType = TableSegmentType_Item_RangedWeapons; break;
                case 9: segmentType = TableSegmentType_Item_Footer; break;
            }
        }
        else if ( !Stricmp( tableName, "unit" ) )
        {
            switch ( segmentIndex )
            {
                case 0: segmentType = TableSegmentType_Unit_EnemyUnitStats; break;
                case 1: segmentType = TableSegmentType_Unit_EnemyElementalAffinities; break;
                case 2: segmentType = TableSegmentType_Unit_PersonaElementalAffinities; break;
                case 3: segmentType = TableSegmentType_Unit_VoiceIndex; break;
                case 4: segmentType = TableSegmentType_Unit_VisualIndex; break;
            }
        }
        else if ( !Stricmp( tableName, "visual" ) )
        {
            switch ( segmentIndex )
            {
                case 0: segmentType = TableSegmentType_Visual_EnemyVisualVariablesA; break;
                case 1: segmentType = TableSegmentType_Visual_PlayerVisualVariablesA; break;
                case 2: segmentType = TableSegmentType_Visual_PersonaVisualVariablesA; break;
                case 3: segmentType = TableSegmentType_Visual_PlayerVisualVariablesB; break;
                case 4: segmentType = TableSegmentType_Visual_EnemyVisualVariablesB; break;
                case 5: segmentType = TableSegmentType_Visual_PersonaVisualVariablesB; break;
            }
        }

        Printf( "%s\n", EnumToString( segmentType ) );
        SetBackColor( MyRandom( 0xFFFFFFFF ) );
        TTableSegment Segment( segmentType );

        ++segmentIndex;
    }

} TTable;

typedef struct
{
    LittleEndian();
    char FileName[ 252 ]<hidden=true>;
    u32 FileSize;

    if ( Stricmp( FileNameGetExtension( FileName ), ".tbl" ) == 0 )
    {
        BigEndian();
        TTable Table( FileNameGetBase( FileName, false ), FTell() + FileSize );
    }
    else
    {
        u8 Data[ FileSize ];
    }

    FAlign( 64 );
} TFile <read=FileToString>;

string FileToString( struct TFile& file )
{
    return file.FileName;
}


// Read table
local string filePath = GetFileName();
local string fileName = FileNameGetBase( filePath, false );
local string fileExt = FileNameGetExtension( filePath );

if ( Stricmp( fileExt, ".pac" ) == 0 )
{
    // table.pac
    while ( !FEof() )
    {
        TFile File <name = "File">;
    }
}
else if ( Stricmp( fileExt, ".tbl" ) == 0 )
{
    // tbl file
    BigEndian();
    TTable Table( fileName, FileSize() );
}
