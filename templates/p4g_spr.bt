//------------------------------------------------
//--- 010 Editor v8.0 Binary Template
//
//      File: p5_spd.bt
//   Authors: TGE
//   Version: 1.0
//   Purpose: Parse Persona 5 SPD files 
//  Category: 
// File Mask: *.spd
//  ID Bytes: 
//   History: 
//------------------------------------------------

//---------------------------------------------
// Primitive types
//---------------------------------------------
typedef char bool;
typedef char s8;
typedef uchar u8;
typedef int16 s16;
typedef uint16 u16;
typedef int16 s16;
typedef int32 s32;
typedef uint32 u32;
typedef int64 s64;
typedef uint64 u64;
typedef float f32;
typedef double f64;

//---------------------------------------------
// Random
//---------------------------------------------
local uint __RandomSeed = 0xDEADBABE;
local uint __RandomBit = 0;
local uint __RandomCount = 0;
 
uint MyRandom( uint to )
{
    ++__RandomCount;
    __RandomBit  = ( (__RandomSeed >> 0 ) ^ ( __RandomSeed >> 2 ) ^ ( __RandomSeed >> 3 ) ^ ( __RandomSeed >> 5 ) ) & 1;
    __RandomSeed = ( ( ( ( __RandomBit << 15 ) | ( __RandomSeed >> 1 ) ) + ( 0xBABE / __RandomCount ) ) % to );

    while( __RandomSeed < 0 )
        __RandomSeed += to;

    return __RandomSeed;
}

uint RandomColor()
{
    return MyRandom( 0xFFFFFFFF );
}

void SetRandomBackColor()
{
    SetBackColor( RandomColor() );
}

struct TexturePointers;
struct SpritePointers;
struct SpriteEntry;

typedef struct
{
    SetRandomBackColor();
    LittleEndian();
	u16 flags;
	u16 userId;
	s32 reserved1;
	char Magic[4];      // 'SPR0'
	u32 HeaderSize;        // always 2, maybe version
	u32 FileSize;
	u16 TextureCount;   // 1
	u16 EntryCount;     // number of entries in the file
	u32 TextureOffset;  // 0x20, offset
	u32 EntryOffset;    // 0x80, offset

    FSeek( TextureOffset );
    TexturePointers Textures[ TextureCount ];

    FSeek( EntryOffset );
    SpritePointers spritePointers[ EntryCount ];

} SprFile<optimize=false>;

typedef struct
{
	SetRandomBackColor();
	
	short unk00;
	short unk02;
	uint tmxSize;
	
	u8 data[tmxSize - 8];
}TmxData<optimize=false>;

typedef struct
{
	SetRandomBackColor();
	
	int unk00;
	int spriteEntryOffset;
	
	local u64 seekBack = FTell();
    FSeek( spriteEntryOffset );
    SpriteEntry spriteData;
    FSeek( seekBack );
} SpritePointers<optimize=false>;

typedef struct 
{
    SetRandomBackColor();

	u32 Id;                 // starts at 1
	u32 Offset;             // offset of data in file

    local u64 seekBack = FTell();
    FSeek( Offset );
    TmxData textureData;
    FSeek( seekBack );

} TexturePointers <optimize=false>;

typedef struct 
{
    SetRandomBackColor();

	int _unk0x00;
    char Comment[16];
    int TextureIndex;
    int _unk0x18;   // some sort of id?
    int _unk0x1C;
    int _unk0x20;
    int _unk0x24;
    int _unk0x28;
    int _unk0x2C;
    int _unk0x30;
    int _unk0x34;
    int _unk0x38;
    int _unk0x3C;
    int _unk0x40;   // set in 'center' frames?
    int mOffsetX;
    int mOffsetY;
    int _unk0x4C;
    int _unk0x50;
    int mCoordX1;
    int mCoordY1;
    int mCoordX2;
    int mCoordY2;
    int _unk0x64;   // argb color
    int _unk0x68;   // argb color
    int _unk0x6C;   // argb color
    int _unk0x70;   // argb color
    short Length;   
    short Height;
    int _unk0x78;   // possibly padding
    int _unk0x7C;   // possibly padding

} SpriteEntry <optimize=false, read=Str("Texture Id: %d", TextureIndex)>;

// Read file
local string filePath = GetFileName();
local string fileName = FileNameGetBase( filePath, false );
local string fileExt = FileNameGetExtension( filePath );

if (fileExt == ".sprt")
	SpriteEntry entry;
else
	SprFile File;