
//------------------------------------------------
//--- 010 Editor v8.0 Binary Template
//
//      File: AtlusTable_P3F.bt
//   Authors: D3, DniweTamp, Phoenix, Sierra
//   Version: 1.1
//   Purpose: Parse Persona 3 FES Table files.
//  Category: Persona 3 FES
// File Mask: *.tbl
//  ID Bytes:
//   History:
//   1.0 - Initial release
//   1.1 - Added partial support for ENCOUNT.TBL and ENCOUNT_F.TBL
//   1.2 - Support for AICALC.TBL and AICALC_F.TBL
//------------------------------------------------


//---------------------------------------------
// Type definition
//---------------------------------------------
typedef ubyte u8;
typedef short s16;
typedef ushort u16;
typedef ushort u16;
typedef uint u32;
typedef float f32;

enum<byte>bool
{
    False = 0,
    True = 1,
};

typedef struct
{
    u8 bit0 : 1;
    u8 bit1 : 1;
    u8 bit2 : 1;
    u8 bit3 : 1;
    u8 bit4 : 1;
    u8 bit5 : 1;
    u8 bit6 : 1;
    u8 bit7 : 1;
} b8;

typedef struct
{
    u8 bit0 : 1;
    u8 bit1 : 1;
    u8 bit2 : 1;
    u8 bit3 : 1;
    u8 bit4 : 1;
    u8 bit5 : 1;
    u8 bit6 : 1;
    u8 bit7 : 1;
    u8 bit8 : 1;
    u8 bit9 : 1;
    u8 bit10 : 1;
    u8 bit11 : 1;
    u8 bit12 : 1;
    u8 bit13 : 1;
    u8 bit14 : 1;
    u8 bit15 : 1;
} b16;

typedef struct
{
    u8 bit0 : 1;
    u8 bit1 : 1;
    u8 bit2 : 1;
    u8 bit3 : 1;
    u8 bit4 : 1;
    u8 bit5 : 1;
    u8 bit6 : 1;
    u8 bit7 : 1;
    u8 bit8 : 1;
    u8 bit9 : 1;
    u8 bit10 : 1;
    u8 bit11 : 1;
    u8 bit12 : 1;
    u8 bit13 : 1;
    u8 bit14 : 1;
    u8 bit15 : 1;
    u8 bit16 : 1;
    u8 bit17 : 1;
    u8 bit18 : 1;
    u8 bit19 : 1;
    u8 bit20 : 1;
    u8 bit21 : 1;
    u8 bit22 : 1;
    u8 bit23 : 1;
    u8 bit24 : 1;
    u8 bit25 : 1;
    u8 bit26 : 1;
    u8 bit27 : 1;
    u8 bit28 : 1;
    u8 bit29 : 1;
    u8 bit30 : 1;
    u8 bit31 : 1;
} b32;


//---------------------------------------------
// Includes
//---------------------------------------------
#include "p3f_enums.bt"
#include "p3f_structs.bt"
//---------------------------------------------
// Helper functions
//---------------------------------------------
local uint __RandomSeed = 0xDEADBABE;
local uint __RandomBit = 0;
local uint __RandomCount = 0;

uint MyRandom( uint to )
{
    ++__RandomCount;
    __RandomBit  = ( (__RandomSeed >> 0 ) ^ ( __RandomSeed >> 2 ) ^ ( __RandomSeed >> 3 ) ^ ( __RandomSeed >> 5 ) ) & 1;
    __RandomSeed = ( ( ( ( __RandomBit << 15 ) | ( __RandomSeed >> 1 ) ) + ( 0xBABE / __RandomCount ) ) % to );

    while( __RandomSeed < 0 )
        __RandomSeed += to;

    return __RandomSeed;
}

void DetectEndianness()
{
    // Test endianness
    LittleEndian();
    local uint sizeTest = ReadUInt();
    if ( sizeTest & 0xFF000000 )
        BigEndian();
}

u32 Align( u32 value, u32 alignment )
{
  return (value + (alignment - 1)) & ~(alignment - 1);
}

void FAlign( u32 alignment )
{
  FSeek( Align( FTell(), alignment ) );
}

//---------------------------------------------
// Define structures
//---------------------------------------------

// MODEL.TBL

typedef struct
{
	s16 Hitreg <name = "Effect Frame", comment = "The frame where damage is dealt, the frame where the card break effect plays, the frame where the item use effect plays, etc.">;
	s16 Animation_speed <name = "Animation Speed">;
	s16 Airtime <name = "Time in the air">;
	s16 Animation_Distance <name = "Animation Distance from Enemy">;
	s16 Unknown2;
} TVisual_Animation_Data <name = "Animation Data">;

typedef struct
{
    s16 Field000 <name = "s16 Field000 - Unknown">;
	s16 Field001 <name = "s16 Field001 - Unknown">;
	s16 Field002 <name = "[Magic - Single] Y-Axis Camera Position/Tilt">;
	s16 Field003 <name = "[Phys - Single?] Camera Zoom/Distance from Enemy">;
	s16 Field004 <name = "[Phys - Multi] Y-Axis Camera Position/Tilt">;
	s16 Field005 <name = "[All but Phys Multi] Player distance from enemy">;
	s16 Field006;
	s16 Field007;
	s16 PhysLocation <name = "Model location for Physical Animation">;
	s16 Field009 <name = "[Magic] X-Axis Model Position">;
	s16 Field010 <name = "[Magic] Y-Axis Model Position">;
	s16 MagLocation <name = "[Magic] Z-Axis Model Position">;
	s16 Model_Size <name = "Model Scale (Percentage)">;
	TVisual_Animation_Data Anim_Data [6];
	s16 Field043 <name = "Model Alpha">;
} TVisual_PersonaVisualVariablesA <name = "Persona Visual Variables">;

// EFFECT.TBL

typedef struct
{
    u8 Unknown4[ 28 ];
} TEffect <name = "Skill Effects">;

typedef struct
{
    u8 Unknown5[ 48 ];
} Ttesting <name = "Testin">;

// ENCOUNT.TBL

typedef struct
{
    u32 Unknown <name="Encounter Flags">;
	u16 Field04<name="Unknown">;
	u16 Field06<name="Unknown">;
    EnemyID Units[ 5 ] <name = "Battle Units">;
    u16 FieldId <name = "Field ID">;
    u16 RoomId <name = "Room ID">;
    MusicID MusicId <name = "Music">;
	u16 Field08<name="Unknown">;
	u16 Field10<name="Unknown">;
} TEncounter <name = "Enemy Encounters">;

// ENCOUNT_F.TBL

typedef struct
{
    u32 Unknown <name="Encounter Flags">;
	u16 Field04<name="Unknown">;
	u16 Field06<name="Unknown">;
    EnemyID Units[ 5 ] <name = "Battle Units">;
    u16 FieldId <name = "Field ID">;
    u16 RoomId <name = "Room ID">;
    MusicID MusicId <name = "Music">;
	u16 Field08<name="Unknown">;
	u16 Field10<name="Unknown">;
} TEncounterF <name = "Enemy Encounters">;

//PERSONA.TBL

typedef struct
{
    FusionType Type <name = "Fusion Type">;
    ArcanaID Arcana <name = "Arcana">;
    u8 Level <name = "Base Level">;
    PersonaStats Stats <name = "Base Stats">;
    u8 Unknown;
    PersonaInherit Inheritance <name = "Inheritance">;
    HeartItem Item <name = "Has Heart Item?">;
    u8 Unknown < name = "Unknown", comment = "Biggest number = Best Personas?" >;
} TPersonaStats <name = "Stats">;

local u32 personaSkillsAndStatGrowth = 0;
typedef struct
{
    PersonaStats WeightedStatDistribution <name = "Weighted Stat Growth Distribution">;
    u8 Unknown;

    struct
    {
        u8 PendingLevels <name = "Pending Levels">;
        SkillProgression Learnable <name = "Learnable?">;
        BattleSkill Skill  <name = "Skill">;
    } PersonaSkill[ 16 ] <name = "Skills">;
    
} TPersonaSkillsAndStatGrowths <name = "Skills & Stat Growths">;

typedef struct
{
    CharacterID Member <name = "Character">;
    u16 LevelsAvailable <name = "Levels Available">;

    struct
    {
        u8 Level <name = "Level Learned">;
        SkillProgression Learnable <name = "Learnable?">;
        BattleSkill Skill <name = "Skill">;
    } PersonaSkill[ 32 ] <name = "Persona Skills">;

    PersonaStats StatGain[ 98 ] <name = "Persona Stat Gain by Level", comment = "Add 2 for the level (0 is level 2)" >;

} TPersonaPartyPersonas <name = "Party Member Personas">;

typedef struct
{
    u32 Thresholds[98] <name = "EXP Threshold">;
} TPersonaLevelUpThresholds <name = "Party Member Level Up Thresholds">;

typedef struct
{
    u8 ID;
    u8 Unknown;
} TExist <name = "EXIST.TBL Equivalent">;

typedef struct
{
    u16 AsFusionTarget;
    u16 AsFusionMaterial;
} TPersonaFusion <name = "Persona Fusion">;

//PERSONA_F.TBL

typedef struct
{
    FusionType Type <name = "Fusion Type">;
    ArcanaID Arcana <name = "Arcana">;
    u8 Level <name = "Base Level">;
    PersonaStats Stats <name = "Base Stats">;
    u8 Unknown;
    PersonaInherit Inheritance <name = "Inheritance">;
    HeartItem Item <name = "Has Heart Item?">;
    u8 Unknown < name = "Unknown", comment = "Biggest number = Best Personas?" >;
} TPersonaStatsF <name = "Stats">;

local u32 personaSkillsAndStatGrowthF = 0;
typedef struct
{
    PersonaStats WeightedStatDistribution <name = "Weighted Stat Growth Distribution">;
    u8 Unknown;

    struct
    {
        u8 PendingLevels <name = "Pending Levels">;
        bool Learnable <name = "Learnable?">;
        BattleSkill Skill  <name = "Skill">;
    } PersonaSkill[ 16 ] <name = "Skills">;
    
} TPersonaSkillsAndStatGrowthsF <name = "Skills & Stat Growths">;

typedef struct
{
    CharacterID Member <name = "Character">;
    u16 LevelsAvailable <name = "Levels Available">;

    struct
    {
        u8 Level <name = "Level Learned">;
        SkillProgression Learnable <name = "Learnable?">;
        BattleSkill Skill <name = "Skill">;
    } PersonaSkill[ 32 ] <name = "Persona Skills">;

    PersonaStats StatGain[ 98 ] <name = "Persona Stat Gain by Level">;

} TPersonaPartyPersonasF <name = "Party Member Personas">;

typedef struct
{
    u32 Thresholds[98] <name = "EXP Threshold">;
} TPersonaLevelUpThresholdsF <name = "Party Member Level Up Thresholds">;

typedef struct
{
    u8 ID;
    u8 Unknown;
} TExistF <name = "EXIST.TBL Equivalent">;

typedef struct
{
    u16 AsFusionTarget;
    u16 AsFusionMaterial;
} TPersonaFusionF <name = "Persona Fusion">;

//UNIT.TBL

typedef struct
{
    b16 Flags <name = "Flags">;
    ArcanaID Arcana <name = "Arcana">;
    u8 Level <name = "Level">;
    u16 Hp <name = "HP">;
    u16 Sp <name = "SP">;
    PersonaStats Stats;
    byte : 1;
    BattleSkill SkillID[ 8 ] <name = "Battle Skills">;
    FuukaScan ScanType <name = "FuukaScan", comment = "Determines the effectiveness of Fuukas scan">;
    u16 ExpReward <name = "Exp Reward">;
    ItemDrop Reward <name = "ItemDrop">;
    u16 DropRate <name = "Drop Rate out of 200">;
    u8 QuestDrops[ 18 ] <comment = "Changes for enemies with possible quest drops, needs more research">;
    u16 AttackAccuracy <name = "AttackAccuracy">;
    u16 AttackDamage <name = "AttackDamage">;
    AttackType SkillID <name = "AttackType">;
} TEnemyUnitStats <name = "Enemy Unit Stats">;

//UNIT_F.TBL

typedef struct
{
    b16 Flags <name = "Flags">;
    ArcanaID Arcana <name = "Arcana">;
    u8 Level <name = "Level">;
    u16 Hp <name = "HP">;
    u16 Sp <name = "SP">;
    PersonaStats Stats;
    byte : 1;
    BattleSkill SkillID[ 8 ] <name = "Battle Skills">;
    FuukaScan ScanType <name = "FuukaScan", comment = "Determines the effectiveness of Fuukas scan">;
    u16 ExpReward <name = "Exp Reward">;
    ItemDrop Reward <name = "ItemDrop">;
    u16 DropRate <name = "Drop Rate out of 200">;
    u8 QuestDrops[ 18 ] <comment = "Changes for enemies with possible quest drops, needs more research">;
    u16 AttackAccuracy <name = "AttackAccuracy">;
    u16 AttackDamage <name = "AttackDamage">;
    u16 DamageType <name = "DamageType">;
} TEnemyUnitStatsF <name = "Enemy Unit Stats">;

// SKILL.TBL

typedef struct
{
    ElementalType Element <name = "Elemental Type">;
    Skill_SkillType SkillType <name = "Skill Type", comment = "Must be set correctly for the element icon to appear properly, even though it's otherwise redundant">;
} TSkill_Elements <name = "Skill Elements">;

typedef struct
{
    Skill_Type skill_Type <name = "Skill Type">;
	
    struct
        {
            bool Field : 1 <name = "Usable in Field">;
            bool Battle : 1 <name = "Usable in Battle">;
            byte : 6;
        } Skill_Area <name = "Skill Area Type">;
    Skill_PhysicalOrMagicSkill PhysicalOrMagic <name = "Physical or Magic?", comment = "determines what's affected by either Charge or Concentrate, but doesn't seem to change what's reflected by Tetrakarn or Makarakarn. Needs more testing">;
    Skill_CostType CostType <name = "Cost Type">;
    u8 SkillCost <name = "Skill Cost", comment = "% of max HP or fixed amount of SP">;
    u8 Unknown <name = "Unknown">; // 0 on all skills
    u8 Unknown <name = "Unknown">; // seems phys skill related, needs testing
    u8 Unknown <name = "Unknown">; // 0 on all skills
    Skill_NumberOfTargets NumberOfTargets <name = "Number of Targets">;
	
    struct
        {
            bool Allies : 1 <name = "Allies">;
            bool Enemies : 1 <name = "Enemies">;
            byte : 6;
        } ValidTargets <name = "Valid Targets">;

    TargetStatus Status<name = "Target Status">;
    u8 Unknown <name = "Unknown">; // 0 on all skills
    Skill_AilmentTargetType AilmentTargetType <name = "Ailment Target Type">; //Skill_TargetRestrictions TargetRestrictions <name = "Additional Target Restrictions">;
    Skill_AilmentTargets AilmentTargets <name = "Ailment Target", comment = "seems to check if there are any available targets with ailments in conjuction with above variable. Needs testing">;
    u8 SkillAccuracy <name = "Accuracy (%)">;
    u8 MinHit <name = "Minimum Amount of Hits">;
    u8 MaxHit <name = "Maximum Amount of Hits">;
    Skill_HPEffect Healing1 <name = "Health Change Type">;
    u16 Healing2 <name = "Health Change Value">;
    Skill_SPEffect SPGain <name = "Type of SP Gain">;
    u8 Unknown <name = "Unknown">; // 0 on all skills
    u16 Sp2 <name = "SP Amount">;

    Skill_EnableAilment EnableAilment <name = "Enable Ailment", comment = "AilmentOn also applies to insta-kill spells (light/dark)">;
    u8 AlimentChance <name = "Ailments Effect Chance (%)">;
    u8 Unknown <name = "Unknown">; // 0 on all skills
    u8 Unknown <name = "Unknown">; // 0 on all skills
    Skill_Ailments Ailments <name = "Ailments">;
    u8 Unknown <name = "Unknown">;
    Skill_SpecialAilments SpecialAil <name = "Special Ailments">;
    u8 Unknown <name = "Unknown">; // 0 on all skills

    Skill_BuffDebuff BuffDebuff <name = "Buffs/Debuffs", comment = "Heat Riser is used for a fusion spell, Debilitate is unused">;
    Skill_Bonus Bonus <name = "Damage Bonuses">;
    u8 CritChance <name = "Critical Hit Chance (%)">;

    u8 Unknown <name = "Unknown">; // needs testing
    u8 Unknown <name = "Unknown">; // 0 on all skills
    u8 Unknown <name = "Unknown">; // 1 on all skills
    u8 Unknown <name = "Unknown">; // 0 on all skills
    u8 Unknown <name = "Unknown">; // 0 on all skills
    u8 Unknown <name = "Unknown">; // 0 on all skills
} TSkill_ActiveSkillData <name="Active Skill Data: ">;

// MSG.TBL

typedef struct {
    char ArcanaName[21] <name = "Arcana Name">;
} TMSG_ArcanaNames <name = "Arcana Names">;

typedef struct {
    char SkillName[19] <name = "Skill Name">;
} TMSG_SkillNames <name = "Skill Names">;

typedef struct {
    char EnemyName[19] <name = "Enemy Name">;
} TMSG_EnemyNames <name = "Enemy Names">;

typedef struct {
    char PersonaName[17] <name = "Persona Name">;
} TMSG_PersonaNames <name = "Persona Names">;

typedef struct {
    char TextBMD[1] <name = "BMD Message">;
} TMSG_TextsBMD <name = "BMD Messages">;

// Elsai
typedef struct
{
    u16 Unused;
    u16 AiId <name = "AI ID", comment = "All I know about this value is that if it's not 0, it causes the game to load an AI script for this enemy">; 
    u32 Unknown[ 10 ];
} TElsaiSegment1Entry;

typedef struct
{
    u8 Data[ 320 ];
} TElsaiSegment2Entry;

// AICalc tables
// Segment1 probably has bigger chunks than u32
typedef struct
{
    f32 Unknown;
} TAICalc_Segment1;

typedef struct
{
    f32 Unknown;
} TAICalc_Segment2;

typedef struct
{
    f32 Unknown;
} TAICalc_Segment3;

typedef struct
{
    f32 Unknown;
} TAICalc_Segment4;

typedef struct
{
    f32 Unknown;
} TAICalc_Segment5;

typedef struct
{
    u8 Unknown;
    u8 Unknown;
    u8 Unknown;
} TAICalc_Segment6;

typedef struct
{
    f32 Unknown;
} TAICalc_Segment7;

typedef struct
{
    f32 Unknown;
} TAICalc_Segment8;

typedef struct
{
    f32 Unknown;
} TAICalc_Segment9;

typedef struct
{
	u8 Unknown0;
	u8 Unknown1;
	AIFunctions Unknown2 <name = "Which AI function to use">;
	u8 Unknown3;
	u8 Unknown4;
	u8 Unknown5;
	u8 Unknown6;
	u8 Unknown7;
	u8 Unknown8;
	u8 Unknown9;
	u8 Unknown10;
	u8 Unknown11;
	u8 Unknown12;
	u8 Unknown13;
	u8 Unknown14;
	u8 Unknown15;
	u8 Unknown16;
	u8 Unknown17;
	u8 Unknown18;
	u8 Unknown19;
	u8 Unknown20;
	u8 Unknown21;
	u8 Unknown22;
	u8 Unknown23;
	u8 Unknown24;
	u8 Unknown25;
	u8 Unknown26;
	u8 Unknown27;
	u8 Unknown28;
	u8 Unknown29;
	u8 Unknown30;
	u8 Unknown31;
	u8 Unknown32;
	u8 Unknown33;
	u8 Unknown34;
	u8 Unknown35;
	u8 Unknown36;
	u8 Unknown37;
	u8 Unknown38;
	u8 Unknown39;
	u8 Unknown40;
	u8 Unknown41;
	u8 Unknown42;
	u8 Unknown43;
	u16 Unknown44 <name = "Chance to use skill">;
	BattleSkill Unknown46 <name = "Skill">;
	u8 Unknown47;
	u8 Unknown48;
	u16 Unknown49 <name = "Unknown Data">;
	u16 Unknown51 <name = "Chance to use skill">;
	BattleSkill Unknown53 <name = "Skill">;
	u8 Unknown55;
	u8 Unknown56;
	u16 Unknown57 <name = "Unknown Data">;
	u16 Unknown59 <name = "Chance to use skill">;
	BattleSkill Unknown61 <name = "Skill">;
	u8 Unknown63;
	u8 Unknown64;
	u8 Unknown65;
	u8 Unknown66;
	u16 Unknown67 <name = "Chance to use skill">;
	BattleSkill Unknown69 <name = "Skill">;
	u8 Unknown71;
	u8 Unknown72;
	u8 Unknown73;
	u8 Unknown74;
	u16 Unknown75 <name = "Chance to use skill">;
	BattleSkill Unknown77 <name = "Skill">;
	u8 Unknown79;
	u8 Unknown80;
	u8 Unknown81;
	u8 Unknown82;
	u16 Unknown83 <name = "Chance to use skill">;
	BattleSkill Unknown85 <name = "Skill">;
	u8 Unknown87;
	u8 Unknown88;
	u16 Unknown89 <name = "Unknown Data">;
	u16 Unknown91 <name = "Chance to use skill">;
	BattleSkill Unknown93 <name = "Skill">;
	u8 Unknown95;
	u8 Unknown96;
	u16 Unknown97 <name = "Unknown Data">;
	u16 Unknown99 <name = "Chance to use skill">;
	BattleSkill Unknown101 <name = "Skill">;
	u8 Unknown103;
	u8 Unknown104;
	u8 Unknown105;
	u8 Unknown106;
	u16 Unknown107 <name = "Chance to use skill">;
	BattleSkill Unknown109 <name = "Skill">;
	u8 Unknown111;
	u8 Unknown112;
	u8 Unknown113;
	u8 Unknown114;
	u8 Unknown115;
	u8 Unknown116;
	u8 Unknown117;
	u8 Unknown118;
	u8 Unknown119;
	u8 Unknown120;
	u8 Unknown121;
	u8 Unknown122;
	u16 Unknown123 <name = "Chance to use skill">;
	BattleSkill Unknown126 <name = "Skill">;
	u8 Unknown127;
	u8 Unknown128;
	u16 Unknown129 <name = "Unknown Data">;
	u16 Unknown131 <name = "Chance to use skill">;
	BattleSkill Unknown133 <name = "Skill">;
	u8 Unknown135;
	u8 Unknown136;
	u16 Unknown137 <name = "Unknown Data">;
	u16 Unknown139 <name = "Chance to use skill">;
	BattleSkill Unknown141 <name = "Skill">;
	u8 Unknown143;
	u8 Unknown144;
	u8 Unknown145;
	u8 Unknown146;
	u8 Unknown147;
	u8 Unknown148;
	u8 Unknown149;
	u8 Unknown150;
	u8 Unknown151;
	u8 Unknown152;
	u8 Unknown153;
	u8 Unknown154;
	u8 Unknown155;
	u8 Unknown156;
	u8 Unknown157;
	u8 Unknown158;
	u8 Unknown159;
	u8 Unknown160;
	u8 Unknown161;
	u8 Unknown162;
} TAICalc_Generic_Enemy_AI;

//---------------------------------------------
// Parse file structure
//---------------------------------------------
enum TableSegmentType
{
    TableSegmentType_Unknown,
    TableSegmentType_Persona_Stats,
    TableSegmentType_Persona_SkillsAndStatGrowths,
    TableSegmentType_Persona_PartyPersonas,
    TableSegmentType_Persona_PartyLevelUpThresholds,
    TableSegmentType_Persona_Exist,
    TableSegmentType_Persona_Fusion,
    TableSegmentType_Persona_StatsF,
    TableSegmentType_Persona_SkillsAndStatGrowthsF,
    TableSegmentType_Persona_PartyPersonasF,
    TableSegmentType_Persona_PartyLevelUpThresholdsF,
    TableSegmentType_Persona_ExistF,
    TableSegmentType_Persona_FusionF,
    TableSegmentType_Unit_EnemyUnitStats,
    TableSegmentType_Unit_EnemyElementalAffinities,
    TableSegmentType_Unit_PersonaElementalAffinities,
    TableSegmentType_Unit_EnemyUnitStatsF,
    TableSegmentType_Unit_EnemyElementalAffinitiesF,
    TableSegmentType_Unit_PersonaElementalAffinitiesF,
    TableSegmentType_Skill_Elements,
    TableSegmentType_Skill_ActiveSkillData,
    TableSegmentType_Skill_ElementsF,
    TableSegmentType_Skill_ActiveSkillDataF,
    TableSegmentType_MSG_ArcanaNames,
    TableSegmentType_MSG_SkillNames,
    TableSegmentType_MSG_EnemyNames,
    TableSegmentType_MSG_PersonaNames,
    TableSegmentType_MSG_TextsBMD,
	TableSegmentType_Encounter,
    TableSegmentType_EncounterF,
    TableSegmentType_Elsai_Segment0,
    TableSegmentType_Elsai_Segment1,
    TableSegmentType_AICalc_Segment1,
    TableSegmentType_AICalc_Segment2,
    TableSegmentType_AICalc_Segment3,
    TableSegmentType_AICalc_Segment4,
    TableSegmentType_AICalc_Segment5,
    TableSegmentType_AICalc_Segment6,
    TableSegmentType_AICalc_Segment7,
	TableSegmentType_AICalc_Segment8,
	TableSegmentType_AICalc_Segment9,
   	TableSegmentType_AICalc_Generic_Enemy_AI,
    TableSegmentType_Effect,
    TableSegmentType_testing,
};

typedef struct( TableSegmentType _type )
{
    uint Size;
    local TableSegmentType type = _type; // for debugging

    switch ( type )
    {
        case TableSegmentType_Effect:
            TEffect TEffects[ Size / sizeof( TEffect ) ];
            break;

        case TableSegmentType_testing:
            Ttesting Ttestings[ Size / sizeof( Ttesting ) ];
            break;

        case TableSegmentType_Encounter:
            TEncounter TEncounters[ Size / sizeof( TEncounter ) ];
            break;
			
        case TableSegmentType_Encounter:
            TEncounter TEncountersF[ Size / sizeof( TEncounterF ) ];
            break;
			
        case TableSegmentType_Persona_Stats:
            TPersonaStats Stats[ Size / sizeof( TPersonaStats ) ];
            break;

        case TableSegmentType_Persona_SkillsAndStatGrowths:
            TPersonaSkillsAndStatGrowths SkillsAndStatGrowths[ Size / sizeof( TPersonaSkillsAndStatGrowths ) ];
            break;

        case TableSegmentType_Persona_PartyPersonas:
            TPersonaPartyPersonas PartyPersonas[ Size / sizeof( TPersonaPartyPersonas ) ];
            break;

        case TableSegmentType_Persona_PartyLevelUpThresholds:
            TPersonaLevelUpThresholds PartyLevelUpThresholds[ Size / sizeof( TPersonaLevelUpThresholds ) ];
            break;

        case TableSegmentType_Persona_Exist:
            TExist Exist[ Size / sizeof( TExist ) ];
            break;

        case TableSegmentType_Persona_Fusion:
            TPersonaFusion PersonaFusion[ Size / sizeof( TPersonaFusion ) ];
            break;

        case TableSegmentType_Persona_StatsF:
            TPersonaStatsF StatsF[ Size / sizeof( TPersonaStatsF ) ];
            break;

        case TableSegmentType_Persona_SkillsAndStatGrowthsF:
            TPersonaSkillsAndStatGrowthsF SkillsAndStatGrowthsF[ Size / sizeof( TPersonaSkillsAndStatGrowthsF ) ];
            break;

        case TableSegmentType_Persona_PartyPersonasF:
            TPersonaPartyPersonasF PartyPersonasF[ Size / sizeof( TPersonaPartyPersonasF ) ];
            break;

        case TableSegmentType_Persona_PartyLevelUpThresholdsF:
            TPersonaLevelUpThresholdsF PartyLevelUpThresholdsF[ Size / sizeof( TPersonaLevelUpThresholdsF ) ];
            break;

        case TableSegmentType_Persona_ExistF:
            TExistF ExistF[ Size / sizeof( TExistF ) ];
            break;

        case TableSegmentType_Persona_FusionF:
            TPersonaFusionF PersonaFusionF[ Size / sizeof( TPersonaFusionF ) ];
            break;

        case TableSegmentType_Unit_EnemyUnitStats:
            TEnemyUnitStats Stats[ Size / sizeof( TEnemyUnitStats ) ];
            break;

        case TableSegmentType_Unit_EnemyElementalAffinities:
            ElementalAffinities Affinities[ Size / sizeof( ElementalAffinities ) ];
            break;

        case TableSegmentType_Unit_PersonaElementalAffinities:
            ElementalAffinities Affinities[ Size / sizeof( ElementalAffinities ) ];
            break;

        case TableSegmentType_Unit_EnemyUnitStatsF:
            TEnemyUnitStatsF StatsF[ Size / sizeof( TEnemyUnitStatsF ) ];
            break;

        case TableSegmentType_Unit_EnemyElementalAffinitiesF:
            ElementalAffinitiesF AffinitiesF[ Size / sizeof( ElementalAffinitiesF ) ];
            break;

        case TableSegmentType_Unit_PersonaElementalAffinitiesF:
            ElementalAffinitiesF AffinitiesF[ Size / sizeof( ElementalAffinitiesF ) ];
            break;

        case TableSegmentType_Skill_Elements:
            TSkill_Elements SkillElements[ Size / sizeof( TSkill_Elements ) ];
            break;

        case TableSegmentType_Skill_ActiveSkillData:
            TSkill_ActiveSkillData ActiveSkillData[ Size / sizeof( TSkill_ActiveSkillData ) ];
            break;

        case TableSegmentType_MSG_ArcanaNames:
            TMSG_ArcanaNames ArcanaNames[ Size / sizeof( TMSG_ArcanaNames ) ];
            break;

        case TableSegmentType_MSG_SkillNames:
            TMSG_SkillNames SkillNames[ Size / sizeof( TMSG_SkillNames ) ];
            break;

        case TableSegmentType_MSG_EnemyNames:
            TMSG_EnemyNames EnemyNames[ Size / sizeof( TMSG_EnemyNames ) ];
            break;

        case TableSegmentType_MSG_PersonaNames:
            TMSG_PersonaNames PersonaNames[ Size / sizeof( TMSG_PersonaNames ) ];
            break;

        case TableSegmentType_MSG_TextsBMD:
            TMSG_TextsBMD TextsBMD[ Size / sizeof( TMSG_TextsBMD ) ];
            break;

        case TableSegmentType_Elsai_Segment0:
            TElsaiSegment1Entry Entries[ Size / sizeof( TElsaiSegment1Entry ) ];
            break;

        case TableSegmentType_Elsai_Segment1:
            TElsaiSegment2Entry Entries[ Size / sizeof( TElsaiSegment2Entry ) ];
            break;

        case TableSegmentType_AICalc_Segment1:
            TAICalc_Segment1 Entries[ Size / sizeof( TAICalc_Segment1 ) ];
            break;

        case TableSegmentType_AICalc_Segment2:
            TAICalc_Segment2 Entries[ Size / sizeof( TAICalc_Segment2 ) ];
            break;

        case TableSegmentType_AICalc_Segment3:
            TAICalc_Segment3 Entries[ Size / sizeof( TAICalc_Segment3 ) ];
            break;

        case TableSegmentType_AICalc_Segment4:
            TAICalc_Segment4 Entries[ Size / sizeof( TAICalc_Segment4 ) ];
            break;

        case TableSegmentType_AICalc_Segment5:
            TAICalc_Segment5 Entries[ Size / sizeof( TAICalc_Segment5 ) ];
            break;

        case TableSegmentType_AICalc_Segment6:
            TAICalc_Segment6 Entries[ Size / sizeof( TAICalc_Segment6 ) ];
            break;

        case TableSegmentType_AICalc_Segment7:
            TAICalc_Segment7 Entries[ Size / sizeof( TAICalc_Segment7 ) ];
            break;
			
		case TableSegmentType_AICalc_Segment8:
            TAICalc_Segment8 Entries[ 380 / sizeof( TAICalc_Segment8 ) ];
            break;
			
		case TableSegmentType_AICalc_Segment9:
            TAICalc_Segment8 Entries[ 188 / sizeof( TAICalc_Segment9 ) ];
            break;

		case TableSegmentType_AICalc_Generic_Enemy_AI:
            TAICalc_Generic_Enemy_AI Entries[ Size / sizeof( TAICalc_Generic_Enemy_AI ) ];
            break;

        default:
           byte Data[ Size ];
    }

    FAlign( 16 );
} TTableSegment <read=TableSegmentToString>;

string TableSegmentToString( TTableSegment& segment )
{
    return EnumToString( segment.type );
}

typedef struct( string tableName, u16 endOffset )
{
    local int segmentIndex = 0;
    local TableSegmentType segmentType;

    while ( FTell() < endOffset )
    {
        segmentType = TableSegmentType_Unknown;
        if ( !Stricmp( tableName, "encount" ) )
        {
            switch ( segmentIndex )
            {
                case 0: segmentType = TableSegmentType_Encounter; break;
            }
        }

        else if ( !Stricmp( tableName, "encount_f" ) )
        {
            switch ( segmentIndex )
            {
                case 0: segmentType = TableSegmentType_Encounter; break;
            }
        }
		
        else if ( !Stricmp( tableName, "persona" ) )
        {
            switch ( segmentIndex )
            {
                case 0: segmentType = TableSegmentType_Persona_Stats; break;
                case 1: segmentType = TableSegmentType_Persona_SkillsAndStatGrowths; break;
                case 2: segmentType = TableSegmentType_Persona_PartyPersonas; break;
                case 3: segmentType = TableSegmentType_Persona_PartyLevelUpThresholds; break;
                case 4: segmentType = TableSegmentType_Persona_Exist; break;
                case 5: segmentType = TableSegmentType_Persona_Fusion; break;
            }
        }
        else if ( !Stricmp( tableName, "persona_f" ) )
        {
            switch ( segmentIndex )
            {
                case 0: segmentType = TableSegmentType_Persona_StatsF; break;
                case 1: segmentType = TableSegmentType_Persona_SkillsAndStatGrowthsF; break;
                case 2: segmentType = TableSegmentType_Persona_PartyPersonasF; break;
                case 3: segmentType = TableSegmentType_Persona_PartyLevelUpThresholdsF; break;
                case 4: segmentType = TableSegmentType_Persona_ExistF; break;
                case 5: segmentType = TableSegmentType_Persona_FusionF; break;
            }
        }

        else if ( !Stricmp( tableName, "unit" ) )
        {
            switch ( segmentIndex )
            {
                case 0: segmentType = TableSegmentType_Unit_EnemyUnitStats; break;
                case 1: segmentType = TableSegmentType_Unit_EnemyElementalAffinities; break;
                case 2: segmentType = TableSegmentType_Unit_PersonaElementalAffinities; break;
            }
        }

        else if ( !Stricmp( tableName, "unit_f" ) )
        {
            switch ( segmentIndex )
            {
                case 0: segmentType = TableSegmentType_Unit_EnemyUnitStatsF; break;
                case 1: segmentType = TableSegmentType_Unit_EnemyElementalAffinitiesF; break;
                case 2: segmentType = TableSegmentType_Unit_PersonaElementalAffinitiesF; break;
            }
        }

        else if ( !Stricmp( tableName, "msg" ) )
        {
            switch ( segmentIndex )
            {
                case 0: segmentType = TableSegmentType_MSG_ArcanaNames; break;
                case 1: segmentType = TableSegmentType_MSG_SkillNames; break;
                case 2: segmentType = TableSegmentType_MSG_EnemyNames; break;
                case 3: segmentType = TableSegmentType_MSG_PersonaNames; break;
                case 4: segmentType = TableSegmentType_MSG_TextsBMD; break;
            }
        }

        else if ( !Stricmp( tableName, "skill" ) )
        {
            switch ( segmentIndex )
            {
                case 0: segmentType = TableSegmentType_Skill_Elements; break;
                case 1: segmentType = TableSegmentType_Skill_ActiveSkillData; break;
            }
        }

        else if ( !Stricmp( tableName, "skill_f" ) )
        {
            switch ( segmentIndex )
            {
                case 0: segmentType = TableSegmentType_Skill_Elements; break;
                case 1: segmentType = TableSegmentType_Skill_ActiveSkillData; break;
            }
        }
        else if ( !Stricmp( tableName, "elsai" ) )
        {
            switch ( segmentIndex )
            {
                case 0: segmentType = TableSegmentType_Elsai_Segment0; break;
                case 1: segmentType = TableSegmentType_Elsai_Segment1; break;
            }
        } 
        else if ( !Stricmp( tableName, "aicalc" ) )
        {
            switch ( segmentIndex )
            {
                case 0: segmentType = TableSegmentType_AICalc_Segment1; break;
                case 1: segmentType = TableSegmentType_AICalc_Segment2; break;
                case 2: segmentType = TableSegmentType_AICalc_Segment3; break;
                case 3: segmentType = TableSegmentType_AICalc_Segment4; break;
                case 4: segmentType = TableSegmentType_AICalc_Segment5; break;
                case 5: segmentType = TableSegmentType_AICalc_Segment6; break;
                case 6: segmentType = TableSegmentType_AICalc_Segment7; break;
				case 7: segmentType = TableSegmentType_AICalc_Segment8; break;
				case 8: segmentType = TableSegmentType_AICalc_Segment9; break;
				case 9: segmentType = TableSegmentType_AICalc_Generic_Enemy_AI; break;
            }
        } 
        else if ( !Stricmp( tableName, "aicalc_f" ) )
        {
            switch ( segmentIndex )
            {
                case 0: segmentType = TableSegmentType_AICalc_Segment1; break;
                case 1: segmentType = TableSegmentType_AICalc_Segment2; break;
                case 2: segmentType = TableSegmentType_AICalc_Segment3; break;
                case 3: segmentType = TableSegmentType_AICalc_Segment4; break;
                case 4: segmentType = TableSegmentType_AICalc_Segment5; break;
                case 5: segmentType = TableSegmentType_AICalc_Segment6; break;
                case 6: segmentType = TableSegmentType_AICalc_Segment7; break;
				case 7: segmentType = TableSegmentType_AICalc_Segment8; break;
				case 8: segmentType = TableSegmentType_AICalc_Segment9; break;
				case 9: segmentType = TableSegmentType_AICalc_Generic_Enemy_AI; break;
            }
        }
        else if ( !Stricmp( tableName, "effect" ) )
        {
            switch ( segmentIndex )
            {
                case 0: segmentType = TableSegmentType_Effect; break;
                case 1: segmentType = TableSegmentType_testing; break;
            }
        }  

        Printf( "%s\n", EnumToString( segmentType ) );
        SetBackColor( MyRandom( 0xFFFFFFFF ) );
        TTableSegment Segment( segmentType );

        ++segmentIndex;
    }

} TTable;

typedef struct
{
    LittleEndian();
    char FileName[ 252 ];
    u16 FileSize;

    if ( Stricmp( FileNameGetExtension( FileName ), ".tbl" ) == 0 )
    {
        BigEndian();
        TTable Table( FileNameGetBase( FileName, false ), FTell() + FileSize );
    }
    else
    {
        u8 Data[ FileSize ];
    }

    FAlign( 64 );
} TFile <read=FileToString>;

string FileToString( struct TFile& file )
{
    return file.FileName;
}


// Read table
local string filePath = GetFileName();
local string fileName = FileNameGetBase( filePath, false );
local string fileExt = FileNameGetExtension( filePath );

if ( Stricmp( fileExt, ".pac" ) == 0 )
{
    // table.pac
    while ( !FEof() )
    {
        TFile File;
    }
}
else if ( Stricmp( fileExt, ".tbl" ) == 0 )
{
    // tbl file
    LittleEndian();
    TTable Table( fileName, FileSize() );
}

